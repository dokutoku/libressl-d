/* $OpenBSD: safestack.h,v 1.18 2019/08/11 14:14:14 jsing Exp $ */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
module libressl_d.openssl.safestack;


private static import libressl_d.openssl.asn1;
private static import libressl_d.openssl.bio;
private static import libressl_d.openssl.cms;
private static import libressl_d.openssl.conf;
private static import libressl_d.openssl.crypto;
private static import libressl_d.openssl.err;
private static import libressl_d.openssl.evp;
private static import libressl_d.openssl.lhash;
private static import libressl_d.openssl.objects;
private static import libressl_d.openssl.ocsp;
private static import libressl_d.openssl.ossl_typ;
private static import libressl_d.openssl.pkcs12;
private static import libressl_d.openssl.pkcs7;
private static import libressl_d.openssl.ssl;
private static import libressl_d.openssl.ts;
private static import libressl_d.openssl.ui;
private static import libressl_d.openssl.x509;
private static import libressl_d.openssl.x509_vfy;
private static import libressl_d.openssl.x509v3;
public import libressl_d.openssl.stack;

extern (C):
nothrow @nogc:

version (CHECKED_PTR_OF) {
} else {
	pragma(inline, true)
	pure nothrow @trusted @nogc @live
	void* CHECKED_PTR_OF(string type, P)(return scope P* p)

		do
		{
			return cast(void*)((true) ? (p) : (cast(mixin (type)*)(0)));
		}
}

/*
 * In C++ we get problems because an explicit cast is needed from (void *)
 * we use CHECKED_STACK_OF to ensure the correct type is passed in the macros
 * below.
 */

pragma(inline, true)
pure nothrow @trusted @nogc @live
libressl_d.openssl.stack._STACK* CHECKED_STACK_OF(string type, P)(return scope P* p)

	do
	{
		return cast(libressl_d.openssl.stack._STACK*)((true) ? (p) : (cast(mixin (libressl_d.openssl.safestack.STACK_OF!(type))*)(0)));
	}

//#define CHECKED_SK_FREE_FUNC(type, p) ((void (*)(void*))(((1) ? (p) : ((void (*)(type*)) 0))))

//#define CHECKED_SK_FREE_FUNC2(type, p) ((void (*)(void*))(((1) ? (p) : ((void (*)(type)) 0))))

//#define CHECKED_SK_CMP_FUNC(type, p) ((int (*)(const (void)*, const (void)*))(((1) ? (p) : ((int (*)(const (type)* const*, const (type)* const*)) 0))))

template STACK_OF(string type)
{
	enum STACK_OF = "stack_st_" ~ type;
}

template PREDECLARE_STACK_OF(string type)
{
	enum PREDECLARE_STACK_OF = libressl_d.openssl.safestack.STACK_OF!(type);
}

template DECLARE_STACK_OF(string type)
{
	enum DECLARE_STACK_OF = "struct " ~ libressl_d.openssl.safestack.STACK_OF!(type) ~ " { libressl_d.openssl.stack._STACK stack; }";
}

template DECLARE_SPECIAL_STACK_OF(string type, string type2)
{
	enum DECLARE_SPECIAL_STACK_OF = "struct " ~ libressl_d.openssl.safestack.STACK_OF!(type) ~ " { libressl_d.openssl.stack._STACK stack; }";
}

//#define IMPLEMENT_STACK_OF(type) /* nada (obsolete in new safestack approach) */

/*
 * Strings are special: normally an lhash entry will point to a single
 * (somewhat) mutable object. In the case of strings:
 *
 * a) Instead of a single char, there is an array of chars, NUL-terminated.
 * b) The string may have be immutable.
 *
 * So, they need their own declarations. Especially important for
 * type-checking tools, such as Deputy.
 *
o * In practice, however, it appears to be hard to have a const
 * string. For now, I'm settling for dealing with the fact it is a
 * string at all.
 */
alias OPENSSL_STRING = char*;

alias OPENSSL_CSTRING = const (char)*;

/*
 * Confusingly, LHASH_OF(STRING) deals with char ** throughout, but
 * STACK_OF(STRING) is really more like STACK_OF(char), only, as
 * mentioned above, instead of a single char each entry is a
 * NUL-terminated array of chars. So, we have to implement STRING
 * specially for STACK_OF. This is dealt with in the autogenerated
 * macros below.
 */

//DECLARE_SPECIAL_STACK_OF(OPENSSL_STRING, char)
struct stack_st_OPENSSL_STRING
{
	libressl_d.openssl.stack._STACK stack;
}

/*
 * Similarly, we sometimes use a block of characters, NOT
 * nul-terminated. These should also be distinguished from "normal"
 * stacks.
 */

alias OPENSSL_BLOCK = void*;

//DECLARE_SPECIAL_STACK_OF(OPENSSL_BLOCK, void)
struct stack_st_OPENSSL_BLOCK
{
	libressl_d.openssl.stack._STACK stack;
}

/+
/*
 * SKM_sk_... stack macros are internal to safestack.h:
 * never use them directly, use sk_<type>_... instead
 */
#define SKM_sk_new(type, cmp) ((libressl_d.openssl.safestack.STACK_OF!(type)*) libressl_d.openssl.stack.sk_new(CHECKED_SK_CMP_FUNC(type, cmp)))
#define SKM_sk_new_null(type) ((libressl_d.openssl.safestack.STACK_OF!(type)*) libressl_d.openssl.stack.sk_new_null())
#define SKM_sk_free(type, st) libressl_d.openssl.stack.sk_free(CHECKED_STACK_OF(type, st))
#define SKM_sk_num(type, st) libressl_d.openssl.stack.sk_num(CHECKED_STACK_OF(type, st))
#define SKM_sk_value(type, st, i) ((type*) libressl_d.openssl.stack.sk_value(CHECKED_STACK_OF(type, st), i))
#define SKM_sk_set(type, st, i, val) libressl_d.openssl.stack.sk_set(CHECKED_STACK_OF(type, st), i, CHECKED_PTR_OF(type, val))
#define SKM_sk_zero(type, st) libressl_d.openssl.stack.sk_zero(CHECKED_STACK_OF(type, st))
#define SKM_sk_push(type, st, val) libressl_d.openssl.stack.sk_push(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, val))
#define SKM_sk_unshift(type, st, val) libressl_d.openssl.stack.sk_unshift(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, val))
#define SKM_sk_find(type, st, val) libressl_d.openssl.stack.sk_find(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, val))
#define SKM_sk_find_ex(type, st, val) libressl_d.openssl.stack.sk_find_ex(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, val))
#define SKM_sk_delete(type, st, i) cast(type*)(libressl_d.openssl.stack.sk_delete(CHECKED_STACK_OF(type, st), i))
#define SKM_sk_delete_ptr(type, st, ptr_) cast(type*)(libressl_d.openssl.stack.sk_delete_ptr(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, ptr_)))
#define SKM_sk_insert(type, st, val, i) libressl_d.openssl.stack.sk_insert(CHECKED_STACK_OF(type, st), CHECKED_PTR_OF(type, val), i)
#define SKM_sk_set_cmp_func(type, st, cmp) ((int (*)(const (type)* const*, const (type)* const*)) libressl_d.openssl.stack.sk_set_cmp_func(CHECKED_STACK_OF(type, st), CHECKED_SK_CMP_FUNC(type, cmp)))
#define SKM_sk_dup(type, st) (libressl_d.openssl.safestack.STACK_OF!(type)*) libressl_d.openssl.stack.sk_dup(CHECKED_STACK_OF(type, st))
#define SKM_sk_pop_free(type, st, free_func) libressl_d.openssl.stack.sk_pop_free(CHECKED_STACK_OF(type, st), CHECKED_SK_FREE_FUNC(type, free_func))
#define SKM_sk_shift(type, st) cast(type*)(libressl_d.openssl.stack.sk_shift(CHECKED_STACK_OF(type, st)))
#define SKM_sk_pop(type, st) cast(type*)(libressl_d.openssl.stack.sk_pop(CHECKED_STACK_OF(type, st)))
#define SKM_sk_sort(type, st) libressl_d.openssl.stack.sk_sort(CHECKED_STACK_OF(type, st))
#define SKM_sk_is_sorted(type, st) libressl_d.openssl.stack.sk_is_sorted(CHECKED_STACK_OF(type, st))

#define sk_ACCESS_DESCRIPTION_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, cmp)
#define sk_ACCESS_DESCRIPTION_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION)
#define sk_ACCESS_DESCRIPTION_free(st) SKM_sk_free(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_num(st) SKM_sk_num(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, i)
#define sk_ACCESS_DESCRIPTION_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, i, val)
#define sk_ACCESS_DESCRIPTION_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, val)
#define sk_ACCESS_DESCRIPTION_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, val)
#define sk_ACCESS_DESCRIPTION_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, val)
#define sk_ACCESS_DESCRIPTION_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, val)
#define sk_ACCESS_DESCRIPTION_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, i)
#define sk_ACCESS_DESCRIPTION_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, ptr_)
#define sk_ACCESS_DESCRIPTION_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, val, i)
#define sk_ACCESS_DESCRIPTION_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, cmp)
#define sk_ACCESS_DESCRIPTION_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st, free_func)
#define sk_ACCESS_DESCRIPTION_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)
#define sk_ACCESS_DESCRIPTION_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.ACCESS_DESCRIPTION, st)

#define sk_ASIdOrRange_new(cmp) SKM_sk_new(ASIdOrRange, cmp)
#define sk_ASIdOrRange_new_null() SKM_sk_new_null(ASIdOrRange)
#define sk_ASIdOrRange_free(st) SKM_sk_free(ASIdOrRange, st)
#define sk_ASIdOrRange_num(st) SKM_sk_num(ASIdOrRange, st)
#define sk_ASIdOrRange_value(st, i) SKM_sk_value(ASIdOrRange, st, i)
#define sk_ASIdOrRange_set(st, i, val) SKM_sk_set(ASIdOrRange, st, i, val)
#define sk_ASIdOrRange_zero(st) SKM_sk_zero(ASIdOrRange, st)
#define sk_ASIdOrRange_push(st, val) SKM_sk_push(ASIdOrRange, st, val)
#define sk_ASIdOrRange_unshift(st, val) SKM_sk_unshift(ASIdOrRange, st, val)
#define sk_ASIdOrRange_find(st, val) SKM_sk_find(ASIdOrRange, st, val)
#define sk_ASIdOrRange_find_ex(st, val) SKM_sk_find_ex(ASIdOrRange, st, val)
#define sk_ASIdOrRange_delete(st, i) SKM_sk_delete(ASIdOrRange, st, i)
#define sk_ASIdOrRange_delete_ptr(st, ptr_) SKM_sk_delete_ptr(ASIdOrRange, st, ptr_)
#define sk_ASIdOrRange_insert(st, val, i) SKM_sk_insert(ASIdOrRange, st, val, i)
#define sk_ASIdOrRange_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(ASIdOrRange, st, cmp)
#define sk_ASIdOrRange_dup(st) SKM_sk_dup(ASIdOrRange, st)
#define sk_ASIdOrRange_pop_free(st, free_func) SKM_sk_pop_free(ASIdOrRange, st, free_func)
#define sk_ASIdOrRange_shift(st) SKM_sk_shift(ASIdOrRange, st)
#define sk_ASIdOrRange_pop(st) SKM_sk_pop(ASIdOrRange, st)
#define sk_ASIdOrRange_sort(st) SKM_sk_sort(ASIdOrRange, st)
#define sk_ASIdOrRange_is_sorted(st) SKM_sk_is_sorted(ASIdOrRange, st)

#define sk_ASN1_GENERALSTRING_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, cmp)
#define sk_ASN1_GENERALSTRING_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING)
#define sk_ASN1_GENERALSTRING_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, i)
#define sk_ASN1_GENERALSTRING_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, i, val)
#define sk_ASN1_GENERALSTRING_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, val)
#define sk_ASN1_GENERALSTRING_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, val)
#define sk_ASN1_GENERALSTRING_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, val)
#define sk_ASN1_GENERALSTRING_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, val)
#define sk_ASN1_GENERALSTRING_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, i)
#define sk_ASN1_GENERALSTRING_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, ptr_)
#define sk_ASN1_GENERALSTRING_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, val, i)
#define sk_ASN1_GENERALSTRING_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, cmp)
#define sk_ASN1_GENERALSTRING_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st, free_func)
#define sk_ASN1_GENERALSTRING_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)
#define sk_ASN1_GENERALSTRING_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.ASN1_GENERALSTRING, st)

#define sk_ASN1_INTEGER_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.ASN1_INTEGER, cmp)
#define sk_ASN1_INTEGER_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.ASN1_INTEGER)
#define sk_ASN1_INTEGER_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, i)
#define sk_ASN1_INTEGER_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, i, val)
#define sk_ASN1_INTEGER_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, val)
#define sk_ASN1_INTEGER_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, val)
#define sk_ASN1_INTEGER_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, val)
#define sk_ASN1_INTEGER_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, val)
#define sk_ASN1_INTEGER_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, i)
#define sk_ASN1_INTEGER_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, ptr_)
#define sk_ASN1_INTEGER_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, val, i)
#define sk_ASN1_INTEGER_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, cmp)
#define sk_ASN1_INTEGER_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st, free_func)
#define sk_ASN1_INTEGER_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)
#define sk_ASN1_INTEGER_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.ASN1_INTEGER, st)

#define sk_ASN1_OBJECT_new(cmp) SKM_sk_new(libressl_d.openssl.asn1.ASN1_OBJECT, cmp)
#define sk_ASN1_OBJECT_new_null() SKM_sk_new_null(libressl_d.openssl.asn1.ASN1_OBJECT)
#define sk_ASN1_OBJECT_free(st) SKM_sk_free(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_num(st) SKM_sk_num(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_value(st, i) SKM_sk_value(libressl_d.openssl.asn1.ASN1_OBJECT, st, i)
#define sk_ASN1_OBJECT_set(st, i, val) SKM_sk_set(libressl_d.openssl.asn1.ASN1_OBJECT, st, i, val)
#define sk_ASN1_OBJECT_zero(st) SKM_sk_zero(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_push(st, val) SKM_sk_push(libressl_d.openssl.asn1.ASN1_OBJECT, st, val)
#define sk_ASN1_OBJECT_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.asn1.ASN1_OBJECT, st, val)
#define sk_ASN1_OBJECT_find(st, val) SKM_sk_find(libressl_d.openssl.asn1.ASN1_OBJECT, st, val)
#define sk_ASN1_OBJECT_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.asn1.ASN1_OBJECT, st, val)
#define sk_ASN1_OBJECT_delete(st, i) SKM_sk_delete(libressl_d.openssl.asn1.ASN1_OBJECT, st, i)
#define sk_ASN1_OBJECT_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.asn1.ASN1_OBJECT, st, ptr_)
#define sk_ASN1_OBJECT_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.asn1.ASN1_OBJECT, st, val, i)
#define sk_ASN1_OBJECT_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.asn1.ASN1_OBJECT, st, cmp)
#define sk_ASN1_OBJECT_dup(st) SKM_sk_dup(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.asn1.ASN1_OBJECT, st, free_func)
#define sk_ASN1_OBJECT_shift(st) SKM_sk_shift(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_pop(st) SKM_sk_pop(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_sort(st) SKM_sk_sort(libressl_d.openssl.asn1.ASN1_OBJECT, st)
#define sk_ASN1_OBJECT_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.asn1.ASN1_OBJECT, st)

#define sk_ASN1_STRING_TABLE_new(cmp) SKM_sk_new(libressl_d.openssl.asn1.ASN1_STRING_TABLE, cmp)
#define sk_ASN1_STRING_TABLE_new_null() SKM_sk_new_null(libressl_d.openssl.asn1.ASN1_STRING_TABLE)
#define sk_ASN1_STRING_TABLE_free(st) SKM_sk_free(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_num(st) SKM_sk_num(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_value(st, i) SKM_sk_value(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, i)
#define sk_ASN1_STRING_TABLE_set(st, i, val) SKM_sk_set(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, i, val)
#define sk_ASN1_STRING_TABLE_zero(st) SKM_sk_zero(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_push(st, val) SKM_sk_push(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, val)
#define sk_ASN1_STRING_TABLE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, val)
#define sk_ASN1_STRING_TABLE_find(st, val) SKM_sk_find(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, val)
#define sk_ASN1_STRING_TABLE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, val)
#define sk_ASN1_STRING_TABLE_delete(st, i) SKM_sk_delete(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, i)
#define sk_ASN1_STRING_TABLE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, ptr_)
#define sk_ASN1_STRING_TABLE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, val, i)
#define sk_ASN1_STRING_TABLE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, cmp)
#define sk_ASN1_STRING_TABLE_dup(st) SKM_sk_dup(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st, free_func)
#define sk_ASN1_STRING_TABLE_shift(st) SKM_sk_shift(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_pop(st) SKM_sk_pop(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_sort(st) SKM_sk_sort(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)
#define sk_ASN1_STRING_TABLE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.asn1.ASN1_STRING_TABLE, st)

#define sk_ASN1_TYPE_new(cmp) SKM_sk_new(libressl_d.openssl.asn1.ASN1_TYPE, cmp)
#define sk_ASN1_TYPE_new_null() SKM_sk_new_null(libressl_d.openssl.asn1.ASN1_TYPE)
#define sk_ASN1_TYPE_free(st) SKM_sk_free(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_num(st) SKM_sk_num(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_value(st, i) SKM_sk_value(libressl_d.openssl.asn1.ASN1_TYPE, st, i)
#define sk_ASN1_TYPE_set(st, i, val) SKM_sk_set(libressl_d.openssl.asn1.ASN1_TYPE, st, i, val)
#define sk_ASN1_TYPE_zero(st) SKM_sk_zero(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_push(st, val) SKM_sk_push(libressl_d.openssl.asn1.ASN1_TYPE, st, val)
#define sk_ASN1_TYPE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.asn1.ASN1_TYPE, st, val)
#define sk_ASN1_TYPE_find(st, val) SKM_sk_find(libressl_d.openssl.asn1.ASN1_TYPE, st, val)
#define sk_ASN1_TYPE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.asn1.ASN1_TYPE, st, val)
#define sk_ASN1_TYPE_delete(st, i) SKM_sk_delete(libressl_d.openssl.asn1.ASN1_TYPE, st, i)
#define sk_ASN1_TYPE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.asn1.ASN1_TYPE, st, ptr_)
#define sk_ASN1_TYPE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.asn1.ASN1_TYPE, st, val, i)
#define sk_ASN1_TYPE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.asn1.ASN1_TYPE, st, cmp)
#define sk_ASN1_TYPE_dup(st) SKM_sk_dup(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.asn1.ASN1_TYPE, st, free_func)
#define sk_ASN1_TYPE_shift(st) SKM_sk_shift(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_pop(st) SKM_sk_pop(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_sort(st) SKM_sk_sort(libressl_d.openssl.asn1.ASN1_TYPE, st)
#define sk_ASN1_TYPE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.asn1.ASN1_TYPE, st)

#define sk_ASN1_UTF8STRING_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, cmp)
#define sk_ASN1_UTF8STRING_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING)
#define sk_ASN1_UTF8STRING_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, i)
#define sk_ASN1_UTF8STRING_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, i, val)
#define sk_ASN1_UTF8STRING_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, val)
#define sk_ASN1_UTF8STRING_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, val)
#define sk_ASN1_UTF8STRING_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, val)
#define sk_ASN1_UTF8STRING_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, val)
#define sk_ASN1_UTF8STRING_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, i)
#define sk_ASN1_UTF8STRING_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, ptr_)
#define sk_ASN1_UTF8STRING_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, val, i)
#define sk_ASN1_UTF8STRING_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, cmp)
#define sk_ASN1_UTF8STRING_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st, free_func)
#define sk_ASN1_UTF8STRING_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)
#define sk_ASN1_UTF8STRING_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.ASN1_UTF8STRING, st)

#define sk_ASN1_VALUE_new(cmp) SKM_sk_new(libressl_d.openssl.asn1.ASN1_VALUE, cmp)
#define sk_ASN1_VALUE_new_null() SKM_sk_new_null(libressl_d.openssl.asn1.ASN1_VALUE)
#define sk_ASN1_VALUE_free(st) SKM_sk_free(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_num(st) SKM_sk_num(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_value(st, i) SKM_sk_value(libressl_d.openssl.asn1.ASN1_VALUE, st, i)
#define sk_ASN1_VALUE_set(st, i, val) SKM_sk_set(libressl_d.openssl.asn1.ASN1_VALUE, st, i, val)
#define sk_ASN1_VALUE_zero(st) SKM_sk_zero(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_push(st, val) SKM_sk_push(libressl_d.openssl.asn1.ASN1_VALUE, st, val)
#define sk_ASN1_VALUE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.asn1.ASN1_VALUE, st, val)
#define sk_ASN1_VALUE_find(st, val) SKM_sk_find(libressl_d.openssl.asn1.ASN1_VALUE, st, val)
#define sk_ASN1_VALUE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.asn1.ASN1_VALUE, st, val)
#define sk_ASN1_VALUE_delete(st, i) SKM_sk_delete(libressl_d.openssl.asn1.ASN1_VALUE, st, i)
#define sk_ASN1_VALUE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.asn1.ASN1_VALUE, st, ptr_)
#define sk_ASN1_VALUE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.asn1.ASN1_VALUE, st, val, i)
#define sk_ASN1_VALUE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.asn1.ASN1_VALUE, st, cmp)
#define sk_ASN1_VALUE_dup(st) SKM_sk_dup(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.asn1.ASN1_VALUE, st, free_func)
#define sk_ASN1_VALUE_shift(st) SKM_sk_shift(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_pop(st) SKM_sk_pop(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_sort(st) SKM_sk_sort(libressl_d.openssl.asn1.ASN1_VALUE, st)
#define sk_ASN1_VALUE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.asn1.ASN1_VALUE, st)

#define sk_BIO_new(cmp) SKM_sk_new(libressl_d.openssl.bio.BIO, cmp)
#define sk_BIO_new_null() SKM_sk_new_null(libressl_d.openssl.bio.BIO)
#define sk_BIO_free(st) SKM_sk_free(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_num(st) SKM_sk_num(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_value(st, i) SKM_sk_value(libressl_d.openssl.bio.BIO, st, i)
#define sk_BIO_set(st, i, val) SKM_sk_set(libressl_d.openssl.bio.BIO, st, i, val)
#define sk_BIO_zero(st) SKM_sk_zero(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_push(st, val) SKM_sk_push(libressl_d.openssl.bio.BIO, st, val)
#define sk_BIO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.bio.BIO, st, val)
#define sk_BIO_find(st, val) SKM_sk_find(libressl_d.openssl.bio.BIO, st, val)
#define sk_BIO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.bio.BIO, st, val)
#define sk_BIO_delete(st, i) SKM_sk_delete(libressl_d.openssl.bio.BIO, st, i)
#define sk_BIO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.bio.BIO, st, ptr_)
#define sk_BIO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.bio.BIO, st, val, i)
#define sk_BIO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.bio.BIO, st, cmp)
#define sk_BIO_dup(st) SKM_sk_dup(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.bio.BIO, st, free_func)
#define sk_BIO_shift(st) SKM_sk_shift(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_pop(st) SKM_sk_pop(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_sort(st) SKM_sk_sort(libressl_d.openssl.bio.BIO, st)
#define sk_BIO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.bio.BIO, st)

#define sk_BY_DIR_ENTRY_new(cmp) SKM_sk_new(BY_DIR_ENTRY, cmp)
#define sk_BY_DIR_ENTRY_new_null() SKM_sk_new_null(BY_DIR_ENTRY)
#define sk_BY_DIR_ENTRY_free(st) SKM_sk_free(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_num(st) SKM_sk_num(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_value(st, i) SKM_sk_value(BY_DIR_ENTRY, st, i)
#define sk_BY_DIR_ENTRY_set(st, i, val) SKM_sk_set(BY_DIR_ENTRY, st, i, val)
#define sk_BY_DIR_ENTRY_zero(st) SKM_sk_zero(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_push(st, val) SKM_sk_push(BY_DIR_ENTRY, st, val)
#define sk_BY_DIR_ENTRY_unshift(st, val) SKM_sk_unshift(BY_DIR_ENTRY, st, val)
#define sk_BY_DIR_ENTRY_find(st, val) SKM_sk_find(BY_DIR_ENTRY, st, val)
#define sk_BY_DIR_ENTRY_find_ex(st, val) SKM_sk_find_ex(BY_DIR_ENTRY, st, val)
#define sk_BY_DIR_ENTRY_delete(st, i) SKM_sk_delete(BY_DIR_ENTRY, st, i)
#define sk_BY_DIR_ENTRY_delete_ptr(st, ptr_) SKM_sk_delete_ptr(BY_DIR_ENTRY, st, ptr_)
#define sk_BY_DIR_ENTRY_insert(st, val, i) SKM_sk_insert(BY_DIR_ENTRY, st, val, i)
#define sk_BY_DIR_ENTRY_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(BY_DIR_ENTRY, st, cmp)
#define sk_BY_DIR_ENTRY_dup(st) SKM_sk_dup(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_pop_free(st, free_func) SKM_sk_pop_free(BY_DIR_ENTRY, st, free_func)
#define sk_BY_DIR_ENTRY_shift(st) SKM_sk_shift(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_pop(st) SKM_sk_pop(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_sort(st) SKM_sk_sort(BY_DIR_ENTRY, st)
#define sk_BY_DIR_ENTRY_is_sorted(st) SKM_sk_is_sorted(BY_DIR_ENTRY, st)

#define sk_BY_DIR_HASH_new(cmp) SKM_sk_new(BY_DIR_HASH, cmp)
#define sk_BY_DIR_HASH_new_null() SKM_sk_new_null(BY_DIR_HASH)
#define sk_BY_DIR_HASH_free(st) SKM_sk_free(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_num(st) SKM_sk_num(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_value(st, i) SKM_sk_value(BY_DIR_HASH, st, i)
#define sk_BY_DIR_HASH_set(st, i, val) SKM_sk_set(BY_DIR_HASH, st, i, val)
#define sk_BY_DIR_HASH_zero(st) SKM_sk_zero(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_push(st, val) SKM_sk_push(BY_DIR_HASH, st, val)
#define sk_BY_DIR_HASH_unshift(st, val) SKM_sk_unshift(BY_DIR_HASH, st, val)
#define sk_BY_DIR_HASH_find(st, val) SKM_sk_find(BY_DIR_HASH, st, val)
#define sk_BY_DIR_HASH_find_ex(st, val) SKM_sk_find_ex(BY_DIR_HASH, st, val)
#define sk_BY_DIR_HASH_delete(st, i) SKM_sk_delete(BY_DIR_HASH, st, i)
#define sk_BY_DIR_HASH_delete_ptr(st, ptr_) SKM_sk_delete_ptr(BY_DIR_HASH, st, ptr_)
#define sk_BY_DIR_HASH_insert(st, val, i) SKM_sk_insert(BY_DIR_HASH, st, val, i)
#define sk_BY_DIR_HASH_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(BY_DIR_HASH, st, cmp)
#define sk_BY_DIR_HASH_dup(st) SKM_sk_dup(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_pop_free(st, free_func) SKM_sk_pop_free(BY_DIR_HASH, st, free_func)
#define sk_BY_DIR_HASH_shift(st) SKM_sk_shift(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_pop(st) SKM_sk_pop(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_sort(st) SKM_sk_sort(BY_DIR_HASH, st)
#define sk_BY_DIR_HASH_is_sorted(st) SKM_sk_is_sorted(BY_DIR_HASH, st)

#define sk_CMS_CertificateChoices_new(cmp) SKM_sk_new(libressl_d.openssl.cms.CMS_CertificateChoices, cmp)
#define sk_CMS_CertificateChoices_new_null() SKM_sk_new_null(libressl_d.openssl.cms.CMS_CertificateChoices)
#define sk_CMS_CertificateChoices_free(st) SKM_sk_free(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_num(st) SKM_sk_num(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_value(st, i) SKM_sk_value(libressl_d.openssl.cms.CMS_CertificateChoices, st, i)
#define sk_CMS_CertificateChoices_set(st, i, val) SKM_sk_set(libressl_d.openssl.cms.CMS_CertificateChoices, st, i, val)
#define sk_CMS_CertificateChoices_zero(st) SKM_sk_zero(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_push(st, val) SKM_sk_push(libressl_d.openssl.cms.CMS_CertificateChoices, st, val)
#define sk_CMS_CertificateChoices_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.cms.CMS_CertificateChoices, st, val)
#define sk_CMS_CertificateChoices_find(st, val) SKM_sk_find(libressl_d.openssl.cms.CMS_CertificateChoices, st, val)
#define sk_CMS_CertificateChoices_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.cms.CMS_CertificateChoices, st, val)
#define sk_CMS_CertificateChoices_delete(st, i) SKM_sk_delete(libressl_d.openssl.cms.CMS_CertificateChoices, st, i)
#define sk_CMS_CertificateChoices_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.cms.CMS_CertificateChoices, st, ptr_)
#define sk_CMS_CertificateChoices_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.cms.CMS_CertificateChoices, st, val, i)
#define sk_CMS_CertificateChoices_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.cms.CMS_CertificateChoices, st, cmp)
#define sk_CMS_CertificateChoices_dup(st) SKM_sk_dup(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.cms.CMS_CertificateChoices, st, free_func)
#define sk_CMS_CertificateChoices_shift(st) SKM_sk_shift(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_pop(st) SKM_sk_pop(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_sort(st) SKM_sk_sort(libressl_d.openssl.cms.CMS_CertificateChoices, st)
#define sk_CMS_CertificateChoices_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.cms.CMS_CertificateChoices, st)

#define sk_CMS_RecipientEncryptedKey_new(cmp) SKM_sk_new(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, cmp)
#define sk_CMS_RecipientEncryptedKey_new_null() SKM_sk_new_null(libressl_d.openssl.cms.CMS_RecipientEncryptedKey)
#define sk_CMS_RecipientEncryptedKey_free(st) SKM_sk_free(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_num(st) SKM_sk_num(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_value(st, i) SKM_sk_value(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, i)
#define sk_CMS_RecipientEncryptedKey_set(st, i, val) SKM_sk_set(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, i, val)
#define sk_CMS_RecipientEncryptedKey_zero(st) SKM_sk_zero(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_push(st, val) SKM_sk_push(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, val)
#define sk_CMS_RecipientEncryptedKey_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, val)
#define sk_CMS_RecipientEncryptedKey_find(st, val) SKM_sk_find(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, val)
#define sk_CMS_RecipientEncryptedKey_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, val)
#define sk_CMS_RecipientEncryptedKey_delete(st, i) SKM_sk_delete(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, i)
#define sk_CMS_RecipientEncryptedKey_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, ptr_)
#define sk_CMS_RecipientEncryptedKey_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, val, i)
#define sk_CMS_RecipientEncryptedKey_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, cmp)
#define sk_CMS_RecipientEncryptedKey_dup(st) SKM_sk_dup(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st, free_func)
#define sk_CMS_RecipientEncryptedKey_shift(st) SKM_sk_shift(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_pop(st) SKM_sk_pop(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_sort(st) SKM_sk_sort(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)
#define sk_CMS_RecipientEncryptedKey_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.cms.CMS_RecipientEncryptedKey, st)

#define sk_CMS_RecipientInfo_new(cmp) SKM_sk_new(libressl_d.openssl.cms.CMS_RecipientInfo, cmp)
#define sk_CMS_RecipientInfo_new_null() SKM_sk_new_null(libressl_d.openssl.cms.CMS_RecipientInfo)
#define sk_CMS_RecipientInfo_free(st) SKM_sk_free(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_num(st) SKM_sk_num(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_value(st, i) SKM_sk_value(libressl_d.openssl.cms.CMS_RecipientInfo, st, i)
#define sk_CMS_RecipientInfo_set(st, i, val) SKM_sk_set(libressl_d.openssl.cms.CMS_RecipientInfo, st, i, val)
#define sk_CMS_RecipientInfo_zero(st) SKM_sk_zero(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_push(st, val) SKM_sk_push(libressl_d.openssl.cms.CMS_RecipientInfo, st, val)
#define sk_CMS_RecipientInfo_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.cms.CMS_RecipientInfo, st, val)
#define sk_CMS_RecipientInfo_find(st, val) SKM_sk_find(libressl_d.openssl.cms.CMS_RecipientInfo, st, val)
#define sk_CMS_RecipientInfo_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.cms.CMS_RecipientInfo, st, val)
#define sk_CMS_RecipientInfo_delete(st, i) SKM_sk_delete(libressl_d.openssl.cms.CMS_RecipientInfo, st, i)
#define sk_CMS_RecipientInfo_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.cms.CMS_RecipientInfo, st, ptr_)
#define sk_CMS_RecipientInfo_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.cms.CMS_RecipientInfo, st, val, i)
#define sk_CMS_RecipientInfo_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.cms.CMS_RecipientInfo, st, cmp)
#define sk_CMS_RecipientInfo_dup(st) SKM_sk_dup(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.cms.CMS_RecipientInfo, st, free_func)
#define sk_CMS_RecipientInfo_shift(st) SKM_sk_shift(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_pop(st) SKM_sk_pop(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_sort(st) SKM_sk_sort(libressl_d.openssl.cms.CMS_RecipientInfo, st)
#define sk_CMS_RecipientInfo_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.cms.CMS_RecipientInfo, st)

#define sk_CMS_RevocationInfoChoice_new(cmp) SKM_sk_new(libressl_d.openssl.cms.CMS_RevocationInfoChoice, cmp)
#define sk_CMS_RevocationInfoChoice_new_null() SKM_sk_new_null(libressl_d.openssl.cms.CMS_RevocationInfoChoice)
#define sk_CMS_RevocationInfoChoice_free(st) SKM_sk_free(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_num(st) SKM_sk_num(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_value(st, i) SKM_sk_value(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, i)
#define sk_CMS_RevocationInfoChoice_set(st, i, val) SKM_sk_set(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, i, val)
#define sk_CMS_RevocationInfoChoice_zero(st) SKM_sk_zero(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_push(st, val) SKM_sk_push(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, val)
#define sk_CMS_RevocationInfoChoice_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, val)
#define sk_CMS_RevocationInfoChoice_find(st, val) SKM_sk_find(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, val)
#define sk_CMS_RevocationInfoChoice_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, val)
#define sk_CMS_RevocationInfoChoice_delete(st, i) SKM_sk_delete(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, i)
#define sk_CMS_RevocationInfoChoice_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, ptr_)
#define sk_CMS_RevocationInfoChoice_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, val, i)
#define sk_CMS_RevocationInfoChoice_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, cmp)
#define sk_CMS_RevocationInfoChoice_dup(st) SKM_sk_dup(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st, free_func)
#define sk_CMS_RevocationInfoChoice_shift(st) SKM_sk_shift(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_pop(st) SKM_sk_pop(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_sort(st) SKM_sk_sort(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)
#define sk_CMS_RevocationInfoChoice_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.cms.CMS_RevocationInfoChoice, st)

#define sk_CMS_SignerInfo_new(cmp) SKM_sk_new(libressl_d.openssl.cms.CMS_SignerInfo, cmp)
#define sk_CMS_SignerInfo_new_null() SKM_sk_new_null(libressl_d.openssl.cms.CMS_SignerInfo)
#define sk_CMS_SignerInfo_free(st) SKM_sk_free(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_num(st) SKM_sk_num(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_value(st, i) SKM_sk_value(libressl_d.openssl.cms.CMS_SignerInfo, st, i)
#define sk_CMS_SignerInfo_set(st, i, val) SKM_sk_set(libressl_d.openssl.cms.CMS_SignerInfo, st, i, val)
#define sk_CMS_SignerInfo_zero(st) SKM_sk_zero(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_push(st, val) SKM_sk_push(libressl_d.openssl.cms.CMS_SignerInfo, st, val)
#define sk_CMS_SignerInfo_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.cms.CMS_SignerInfo, st, val)
#define sk_CMS_SignerInfo_find(st, val) SKM_sk_find(libressl_d.openssl.cms.CMS_SignerInfo, st, val)
#define sk_CMS_SignerInfo_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.cms.CMS_SignerInfo, st, val)
#define sk_CMS_SignerInfo_delete(st, i) SKM_sk_delete(libressl_d.openssl.cms.CMS_SignerInfo, st, i)
#define sk_CMS_SignerInfo_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.cms.CMS_SignerInfo, st, ptr_)
#define sk_CMS_SignerInfo_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.cms.CMS_SignerInfo, st, val, i)
#define sk_CMS_SignerInfo_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.cms.CMS_SignerInfo, st, cmp)
#define sk_CMS_SignerInfo_dup(st) SKM_sk_dup(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.cms.CMS_SignerInfo, st, free_func)
#define sk_CMS_SignerInfo_shift(st) SKM_sk_shift(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_pop(st) SKM_sk_pop(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_sort(st) SKM_sk_sort(libressl_d.openssl.cms.CMS_SignerInfo, st)
#define sk_CMS_SignerInfo_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.cms.CMS_SignerInfo, st)

#define sk_CONF_IMODULE_new(cmp) SKM_sk_new(libressl_d.openssl.conf.CONF_IMODULE, cmp)
#define sk_CONF_IMODULE_new_null() SKM_sk_new_null(libressl_d.openssl.conf.CONF_IMODULE)
#define sk_CONF_IMODULE_free(st) SKM_sk_free(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_num(st) SKM_sk_num(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_value(st, i) SKM_sk_value(libressl_d.openssl.conf.CONF_IMODULE, st, i)
#define sk_CONF_IMODULE_set(st, i, val) SKM_sk_set(libressl_d.openssl.conf.CONF_IMODULE, st, i, val)
#define sk_CONF_IMODULE_zero(st) SKM_sk_zero(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_push(st, val) SKM_sk_push(libressl_d.openssl.conf.CONF_IMODULE, st, val)
#define sk_CONF_IMODULE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.conf.CONF_IMODULE, st, val)
#define sk_CONF_IMODULE_find(st, val) SKM_sk_find(libressl_d.openssl.conf.CONF_IMODULE, st, val)
#define sk_CONF_IMODULE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.conf.CONF_IMODULE, st, val)
#define sk_CONF_IMODULE_delete(st, i) SKM_sk_delete(libressl_d.openssl.conf.CONF_IMODULE, st, i)
#define sk_CONF_IMODULE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.conf.CONF_IMODULE, st, ptr_)
#define sk_CONF_IMODULE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.conf.CONF_IMODULE, st, val, i)
#define sk_CONF_IMODULE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.conf.CONF_IMODULE, st, cmp)
#define sk_CONF_IMODULE_dup(st) SKM_sk_dup(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.conf.CONF_IMODULE, st, free_func)
#define sk_CONF_IMODULE_shift(st) SKM_sk_shift(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_pop(st) SKM_sk_pop(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_sort(st) SKM_sk_sort(libressl_d.openssl.conf.CONF_IMODULE, st)
#define sk_CONF_IMODULE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.conf.CONF_IMODULE, st)

#define sk_CONF_MODULE_new(cmp) SKM_sk_new(libressl_d.openssl.conf.CONF_MODULE, cmp)
#define sk_CONF_MODULE_new_null() SKM_sk_new_null(libressl_d.openssl.conf.CONF_MODULE)
#define sk_CONF_MODULE_free(st) SKM_sk_free(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_num(st) SKM_sk_num(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_value(st, i) SKM_sk_value(libressl_d.openssl.conf.CONF_MODULE, st, i)
#define sk_CONF_MODULE_set(st, i, val) SKM_sk_set(libressl_d.openssl.conf.CONF_MODULE, st, i, val)
#define sk_CONF_MODULE_zero(st) SKM_sk_zero(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_push(st, val) SKM_sk_push(libressl_d.openssl.conf.CONF_MODULE, st, val)
#define sk_CONF_MODULE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.conf.CONF_MODULE, st, val)
#define sk_CONF_MODULE_find(st, val) SKM_sk_find(libressl_d.openssl.conf.CONF_MODULE, st, val)
#define sk_CONF_MODULE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.conf.CONF_MODULE, st, val)
#define sk_CONF_MODULE_delete(st, i) SKM_sk_delete(libressl_d.openssl.conf.CONF_MODULE, st, i)
#define sk_CONF_MODULE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.conf.CONF_MODULE, st, ptr_)
#define sk_CONF_MODULE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.conf.CONF_MODULE, st, val, i)
#define sk_CONF_MODULE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.conf.CONF_MODULE, st, cmp)
#define sk_CONF_MODULE_dup(st) SKM_sk_dup(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.conf.CONF_MODULE, st, free_func)
#define sk_CONF_MODULE_shift(st) SKM_sk_shift(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_pop(st) SKM_sk_pop(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_sort(st) SKM_sk_sort(libressl_d.openssl.conf.CONF_MODULE, st)
#define sk_CONF_MODULE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.conf.CONF_MODULE, st)

#define sk_CONF_VALUE_new(cmp) SKM_sk_new(libressl_d.openssl.conf.CONF_VALUE, cmp)
#define sk_CONF_VALUE_new_null() SKM_sk_new_null(libressl_d.openssl.conf.CONF_VALUE)
#define sk_CONF_VALUE_free(st) SKM_sk_free(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_num(st) SKM_sk_num(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_value(st, i) SKM_sk_value(libressl_d.openssl.conf.CONF_VALUE, st, i)
#define sk_CONF_VALUE_set(st, i, val) SKM_sk_set(libressl_d.openssl.conf.CONF_VALUE, st, i, val)
#define sk_CONF_VALUE_zero(st) SKM_sk_zero(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_push(st, val) SKM_sk_push(libressl_d.openssl.conf.CONF_VALUE, st, val)
#define sk_CONF_VALUE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.conf.CONF_VALUE, st, val)
#define sk_CONF_VALUE_find(st, val) SKM_sk_find(libressl_d.openssl.conf.CONF_VALUE, st, val)
#define sk_CONF_VALUE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.conf.CONF_VALUE, st, val)
#define sk_CONF_VALUE_delete(st, i) SKM_sk_delete(libressl_d.openssl.conf.CONF_VALUE, st, i)
#define sk_CONF_VALUE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.conf.CONF_VALUE, st, ptr_)
#define sk_CONF_VALUE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.conf.CONF_VALUE, st, val, i)
#define sk_CONF_VALUE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.conf.CONF_VALUE, st, cmp)
#define sk_CONF_VALUE_dup(st) SKM_sk_dup(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.conf.CONF_VALUE, st, free_func)
#define sk_CONF_VALUE_shift(st) SKM_sk_shift(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_pop(st) SKM_sk_pop(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_sort(st) SKM_sk_sort(libressl_d.openssl.conf.CONF_VALUE, st)
#define sk_CONF_VALUE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.conf.CONF_VALUE, st)

#define sk_CRYPTO_EX_DATA_FUNCS_new(cmp) SKM_sk_new(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, cmp)
#define sk_CRYPTO_EX_DATA_FUNCS_new_null() SKM_sk_new_null(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS)
#define sk_CRYPTO_EX_DATA_FUNCS_free(st) SKM_sk_free(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_num(st) SKM_sk_num(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_value(st, i) SKM_sk_value(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, i)
#define sk_CRYPTO_EX_DATA_FUNCS_set(st, i, val) SKM_sk_set(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, i, val)
#define sk_CRYPTO_EX_DATA_FUNCS_zero(st) SKM_sk_zero(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_push(st, val) SKM_sk_push(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, val)
#define sk_CRYPTO_EX_DATA_FUNCS_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, val)
#define sk_CRYPTO_EX_DATA_FUNCS_find(st, val) SKM_sk_find(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, val)
#define sk_CRYPTO_EX_DATA_FUNCS_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, val)
#define sk_CRYPTO_EX_DATA_FUNCS_delete(st, i) SKM_sk_delete(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, i)
#define sk_CRYPTO_EX_DATA_FUNCS_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, ptr_)
#define sk_CRYPTO_EX_DATA_FUNCS_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, val, i)
#define sk_CRYPTO_EX_DATA_FUNCS_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, cmp)
#define sk_CRYPTO_EX_DATA_FUNCS_dup(st) SKM_sk_dup(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st, free_func)
#define sk_CRYPTO_EX_DATA_FUNCS_shift(st) SKM_sk_shift(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_pop(st) SKM_sk_pop(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_sort(st) SKM_sk_sort(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)
#define sk_CRYPTO_EX_DATA_FUNCS_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.crypto.CRYPTO_EX_DATA_FUNCS, st)

#define sk_CRYPTO_dynlock_new(cmp) SKM_sk_new(libressl_d.openssl.crypto.CRYPTO_dynlock, cmp)
#define sk_CRYPTO_dynlock_new_null() SKM_sk_new_null(libressl_d.openssl.crypto.CRYPTO_dynlock)
#define sk_CRYPTO_dynlock_free(st) SKM_sk_free(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_num(st) SKM_sk_num(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_value(st, i) SKM_sk_value(libressl_d.openssl.crypto.CRYPTO_dynlock, st, i)
#define sk_CRYPTO_dynlock_set(st, i, val) SKM_sk_set(libressl_d.openssl.crypto.CRYPTO_dynlock, st, i, val)
#define sk_CRYPTO_dynlock_zero(st) SKM_sk_zero(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_push(st, val) SKM_sk_push(libressl_d.openssl.crypto.CRYPTO_dynlock, st, val)
#define sk_CRYPTO_dynlock_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.crypto.CRYPTO_dynlock, st, val)
#define sk_CRYPTO_dynlock_find(st, val) SKM_sk_find(libressl_d.openssl.crypto.CRYPTO_dynlock, st, val)
#define sk_CRYPTO_dynlock_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.crypto.CRYPTO_dynlock, st, val)
#define sk_CRYPTO_dynlock_delete(st, i) SKM_sk_delete(libressl_d.openssl.crypto.CRYPTO_dynlock, st, i)
#define sk_CRYPTO_dynlock_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.crypto.CRYPTO_dynlock, st, ptr_)
#define sk_CRYPTO_dynlock_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.crypto.CRYPTO_dynlock, st, val, i)
#define sk_CRYPTO_dynlock_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.crypto.CRYPTO_dynlock, st, cmp)
#define sk_CRYPTO_dynlock_dup(st) SKM_sk_dup(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.crypto.CRYPTO_dynlock, st, free_func)
#define sk_CRYPTO_dynlock_shift(st) SKM_sk_shift(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_pop(st) SKM_sk_pop(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_sort(st) SKM_sk_sort(libressl_d.openssl.crypto.CRYPTO_dynlock, st)
#define sk_CRYPTO_dynlock_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.crypto.CRYPTO_dynlock, st)

#define sk_DIST_POINT_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.DIST_POINT, cmp)
#define sk_DIST_POINT_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.DIST_POINT)
#define sk_DIST_POINT_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.DIST_POINT, st, i)
#define sk_DIST_POINT_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.DIST_POINT, st, i, val)
#define sk_DIST_POINT_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.DIST_POINT, st, val)
#define sk_DIST_POINT_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.DIST_POINT, st, val)
#define sk_DIST_POINT_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.DIST_POINT, st, val)
#define sk_DIST_POINT_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.DIST_POINT, st, val)
#define sk_DIST_POINT_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.DIST_POINT, st, i)
#define sk_DIST_POINT_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.DIST_POINT, st, ptr_)
#define sk_DIST_POINT_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.DIST_POINT, st, val, i)
#define sk_DIST_POINT_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.DIST_POINT, st, cmp)
#define sk_DIST_POINT_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.DIST_POINT, st, free_func)
#define sk_DIST_POINT_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.DIST_POINT, st)
#define sk_DIST_POINT_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.DIST_POINT, st)

#define sk_ENGINE_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.ENGINE, cmp)
#define sk_ENGINE_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.ENGINE)
#define sk_ENGINE_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.ENGINE, st, i)
#define sk_ENGINE_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.ENGINE, st, i, val)
#define sk_ENGINE_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.ENGINE, st, val)
#define sk_ENGINE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.ENGINE, st, val)
#define sk_ENGINE_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.ENGINE, st, val)
#define sk_ENGINE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.ENGINE, st, val)
#define sk_ENGINE_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.ENGINE, st, i)
#define sk_ENGINE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.ENGINE, st, ptr_)
#define sk_ENGINE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.ENGINE, st, val, i)
#define sk_ENGINE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.ENGINE, st, cmp)
#define sk_ENGINE_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.ENGINE, st, free_func)
#define sk_ENGINE_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.ENGINE, st)
#define sk_ENGINE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.ENGINE, st)

#define sk_ENGINE_CLEANUP_ITEM_new(cmp) SKM_sk_new(ENGINE_CLEANUP_ITEM, cmp)
#define sk_ENGINE_CLEANUP_ITEM_new_null() SKM_sk_new_null(ENGINE_CLEANUP_ITEM)
#define sk_ENGINE_CLEANUP_ITEM_free(st) SKM_sk_free(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_num(st) SKM_sk_num(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_value(st, i) SKM_sk_value(ENGINE_CLEANUP_ITEM, st, i)
#define sk_ENGINE_CLEANUP_ITEM_set(st, i, val) SKM_sk_set(ENGINE_CLEANUP_ITEM, st, i, val)
#define sk_ENGINE_CLEANUP_ITEM_zero(st) SKM_sk_zero(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_push(st, val) SKM_sk_push(ENGINE_CLEANUP_ITEM, st, val)
#define sk_ENGINE_CLEANUP_ITEM_unshift(st, val) SKM_sk_unshift(ENGINE_CLEANUP_ITEM, st, val)
#define sk_ENGINE_CLEANUP_ITEM_find(st, val) SKM_sk_find(ENGINE_CLEANUP_ITEM, st, val)
#define sk_ENGINE_CLEANUP_ITEM_find_ex(st, val) SKM_sk_find_ex(ENGINE_CLEANUP_ITEM, st, val)
#define sk_ENGINE_CLEANUP_ITEM_delete(st, i) SKM_sk_delete(ENGINE_CLEANUP_ITEM, st, i)
#define sk_ENGINE_CLEANUP_ITEM_delete_ptr(st, ptr_) SKM_sk_delete_ptr(ENGINE_CLEANUP_ITEM, st, ptr_)
#define sk_ENGINE_CLEANUP_ITEM_insert(st, val, i) SKM_sk_insert(ENGINE_CLEANUP_ITEM, st, val, i)
#define sk_ENGINE_CLEANUP_ITEM_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(ENGINE_CLEANUP_ITEM, st, cmp)
#define sk_ENGINE_CLEANUP_ITEM_dup(st) SKM_sk_dup(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_pop_free(st, free_func) SKM_sk_pop_free(ENGINE_CLEANUP_ITEM, st, free_func)
#define sk_ENGINE_CLEANUP_ITEM_shift(st) SKM_sk_shift(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_pop(st) SKM_sk_pop(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_sort(st) SKM_sk_sort(ENGINE_CLEANUP_ITEM, st)
#define sk_ENGINE_CLEANUP_ITEM_is_sorted(st) SKM_sk_is_sorted(ENGINE_CLEANUP_ITEM, st)

#define sk_ESS_CERT_ID_new(cmp) SKM_sk_new(libressl_d.openssl.ts.ESS_CERT_ID, cmp)
#define sk_ESS_CERT_ID_new_null() SKM_sk_new_null(libressl_d.openssl.ts.ESS_CERT_ID)
#define sk_ESS_CERT_ID_free(st) SKM_sk_free(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_num(st) SKM_sk_num(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_value(st, i) SKM_sk_value(libressl_d.openssl.ts.ESS_CERT_ID, st, i)
#define sk_ESS_CERT_ID_set(st, i, val) SKM_sk_set(libressl_d.openssl.ts.ESS_CERT_ID, st, i, val)
#define sk_ESS_CERT_ID_zero(st) SKM_sk_zero(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_push(st, val) SKM_sk_push(libressl_d.openssl.ts.ESS_CERT_ID, st, val)
#define sk_ESS_CERT_ID_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ts.ESS_CERT_ID, st, val)
#define sk_ESS_CERT_ID_find(st, val) SKM_sk_find(libressl_d.openssl.ts.ESS_CERT_ID, st, val)
#define sk_ESS_CERT_ID_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ts.ESS_CERT_ID, st, val)
#define sk_ESS_CERT_ID_delete(st, i) SKM_sk_delete(libressl_d.openssl.ts.ESS_CERT_ID, st, i)
#define sk_ESS_CERT_ID_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ts.ESS_CERT_ID, st, ptr_)
#define sk_ESS_CERT_ID_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ts.ESS_CERT_ID, st, val, i)
#define sk_ESS_CERT_ID_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ts.ESS_CERT_ID, st, cmp)
#define sk_ESS_CERT_ID_dup(st) SKM_sk_dup(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ts.ESS_CERT_ID, st, free_func)
#define sk_ESS_CERT_ID_shift(st) SKM_sk_shift(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_pop(st) SKM_sk_pop(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_sort(st) SKM_sk_sort(libressl_d.openssl.ts.ESS_CERT_ID, st)
#define sk_ESS_CERT_ID_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ts.ESS_CERT_ID, st)

#define sk_EVP_MD_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.EVP_MD, cmp)
#define sk_EVP_MD_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.EVP_MD)
#define sk_EVP_MD_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.EVP_MD, st, i)
#define sk_EVP_MD_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.EVP_MD, st, i, val)
#define sk_EVP_MD_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.EVP_MD, st, val)
#define sk_EVP_MD_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.EVP_MD, st, val)
#define sk_EVP_MD_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.EVP_MD, st, val)
#define sk_EVP_MD_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.EVP_MD, st, val)
#define sk_EVP_MD_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.EVP_MD, st, i)
#define sk_EVP_MD_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.EVP_MD, st, ptr_)
#define sk_EVP_MD_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.EVP_MD, st, val, i)
#define sk_EVP_MD_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.EVP_MD, st, cmp)
#define sk_EVP_MD_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.EVP_MD, st, free_func)
#define sk_EVP_MD_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.EVP_MD, st)
#define sk_EVP_MD_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.EVP_MD, st)

#define sk_EVP_PBE_CTL_new(cmp) SKM_sk_new(libressl_d.openssl.evp.EVP_PBE_CTL, cmp)
#define sk_EVP_PBE_CTL_new_null() SKM_sk_new_null(libressl_d.openssl.evp.EVP_PBE_CTL)
#define sk_EVP_PBE_CTL_free(st) SKM_sk_free(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_num(st) SKM_sk_num(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_value(st, i) SKM_sk_value(libressl_d.openssl.evp.EVP_PBE_CTL, st, i)
#define sk_EVP_PBE_CTL_set(st, i, val) SKM_sk_set(libressl_d.openssl.evp.EVP_PBE_CTL, st, i, val)
#define sk_EVP_PBE_CTL_zero(st) SKM_sk_zero(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_push(st, val) SKM_sk_push(libressl_d.openssl.evp.EVP_PBE_CTL, st, val)
#define sk_EVP_PBE_CTL_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.evp.EVP_PBE_CTL, st, val)
#define sk_EVP_PBE_CTL_find(st, val) SKM_sk_find(libressl_d.openssl.evp.EVP_PBE_CTL, st, val)
#define sk_EVP_PBE_CTL_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.evp.EVP_PBE_CTL, st, val)
#define sk_EVP_PBE_CTL_delete(st, i) SKM_sk_delete(libressl_d.openssl.evp.EVP_PBE_CTL, st, i)
#define sk_EVP_PBE_CTL_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.evp.EVP_PBE_CTL, st, ptr_)
#define sk_EVP_PBE_CTL_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.evp.EVP_PBE_CTL, st, val, i)
#define sk_EVP_PBE_CTL_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.evp.EVP_PBE_CTL, st, cmp)
#define sk_EVP_PBE_CTL_dup(st) SKM_sk_dup(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.evp.EVP_PBE_CTL, st, free_func)
#define sk_EVP_PBE_CTL_shift(st) SKM_sk_shift(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_pop(st) SKM_sk_pop(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_sort(st) SKM_sk_sort(libressl_d.openssl.evp.EVP_PBE_CTL, st)
#define sk_EVP_PBE_CTL_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.evp.EVP_PBE_CTL, st)

#define sk_EVP_PKEY_ASN1_METHOD_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, cmp)
#define sk_EVP_PKEY_ASN1_METHOD_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD)
#define sk_EVP_PKEY_ASN1_METHOD_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, i)
#define sk_EVP_PKEY_ASN1_METHOD_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, i, val)
#define sk_EVP_PKEY_ASN1_METHOD_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, val)
#define sk_EVP_PKEY_ASN1_METHOD_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, val)
#define sk_EVP_PKEY_ASN1_METHOD_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, val)
#define sk_EVP_PKEY_ASN1_METHOD_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, val)
#define sk_EVP_PKEY_ASN1_METHOD_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, i)
#define sk_EVP_PKEY_ASN1_METHOD_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, ptr_)
#define sk_EVP_PKEY_ASN1_METHOD_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, val, i)
#define sk_EVP_PKEY_ASN1_METHOD_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, cmp)
#define sk_EVP_PKEY_ASN1_METHOD_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st, free_func)
#define sk_EVP_PKEY_ASN1_METHOD_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)
#define sk_EVP_PKEY_ASN1_METHOD_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.EVP_PKEY_ASN1_METHOD, st)

#define sk_EVP_PKEY_METHOD_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, cmp)
#define sk_EVP_PKEY_METHOD_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD)
#define sk_EVP_PKEY_METHOD_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, i)
#define sk_EVP_PKEY_METHOD_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, i, val)
#define sk_EVP_PKEY_METHOD_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, val)
#define sk_EVP_PKEY_METHOD_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, val)
#define sk_EVP_PKEY_METHOD_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, val)
#define sk_EVP_PKEY_METHOD_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, val)
#define sk_EVP_PKEY_METHOD_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, i)
#define sk_EVP_PKEY_METHOD_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, ptr_)
#define sk_EVP_PKEY_METHOD_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, val, i)
#define sk_EVP_PKEY_METHOD_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, cmp)
#define sk_EVP_PKEY_METHOD_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st, free_func)
#define sk_EVP_PKEY_METHOD_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)
#define sk_EVP_PKEY_METHOD_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.EVP_PKEY_METHOD, st)

#define sk_GENERAL_NAME_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.GENERAL_NAME, cmp)
#define sk_GENERAL_NAME_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.GENERAL_NAME)
#define sk_GENERAL_NAME_free(st) SKM_sk_free(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_num(st) SKM_sk_num(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.GENERAL_NAME, st, i)
#define sk_GENERAL_NAME_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.GENERAL_NAME, st, i, val)
#define sk_GENERAL_NAME_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.GENERAL_NAME, st, val)
#define sk_GENERAL_NAME_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.GENERAL_NAME, st, val)
#define sk_GENERAL_NAME_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.GENERAL_NAME, st, val)
#define sk_GENERAL_NAME_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.GENERAL_NAME, st, val)
#define sk_GENERAL_NAME_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.GENERAL_NAME, st, i)
#define sk_GENERAL_NAME_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.GENERAL_NAME, st, ptr_)
#define sk_GENERAL_NAME_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.GENERAL_NAME, st, val, i)
#define sk_GENERAL_NAME_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.GENERAL_NAME, st, cmp)
#define sk_GENERAL_NAME_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.GENERAL_NAME, st, free_func)
#define sk_GENERAL_NAME_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.GENERAL_NAME, st)
#define sk_GENERAL_NAME_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.GENERAL_NAME, st)

#define sk_GENERAL_NAMES_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.GENERAL_NAMES, cmp)
#define sk_GENERAL_NAMES_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.GENERAL_NAMES)
#define sk_GENERAL_NAMES_free(st) SKM_sk_free(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_num(st) SKM_sk_num(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.GENERAL_NAMES, st, i)
#define sk_GENERAL_NAMES_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.GENERAL_NAMES, st, i, val)
#define sk_GENERAL_NAMES_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.GENERAL_NAMES, st, val)
#define sk_GENERAL_NAMES_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.GENERAL_NAMES, st, val)
#define sk_GENERAL_NAMES_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.GENERAL_NAMES, st, val)
#define sk_GENERAL_NAMES_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.GENERAL_NAMES, st, val)
#define sk_GENERAL_NAMES_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.GENERAL_NAMES, st, i)
#define sk_GENERAL_NAMES_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.GENERAL_NAMES, st, ptr_)
#define sk_GENERAL_NAMES_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.GENERAL_NAMES, st, val, i)
#define sk_GENERAL_NAMES_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.GENERAL_NAMES, st, cmp)
#define sk_GENERAL_NAMES_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.GENERAL_NAMES, st, free_func)
#define sk_GENERAL_NAMES_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.GENERAL_NAMES, st)
#define sk_GENERAL_NAMES_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.GENERAL_NAMES, st)

#define sk_GENERAL_SUBTREE_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.GENERAL_SUBTREE, cmp)
#define sk_GENERAL_SUBTREE_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.GENERAL_SUBTREE)
#define sk_GENERAL_SUBTREE_free(st) SKM_sk_free(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_num(st) SKM_sk_num(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, i)
#define sk_GENERAL_SUBTREE_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, i, val)
#define sk_GENERAL_SUBTREE_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, val)
#define sk_GENERAL_SUBTREE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, val)
#define sk_GENERAL_SUBTREE_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, val)
#define sk_GENERAL_SUBTREE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, val)
#define sk_GENERAL_SUBTREE_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, i)
#define sk_GENERAL_SUBTREE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, ptr_)
#define sk_GENERAL_SUBTREE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, val, i)
#define sk_GENERAL_SUBTREE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, cmp)
#define sk_GENERAL_SUBTREE_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st, free_func)
#define sk_GENERAL_SUBTREE_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)
#define sk_GENERAL_SUBTREE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.GENERAL_SUBTREE, st)

#define sk_IPAddressFamily_new(cmp) SKM_sk_new(IPAddressFamily, cmp)
#define sk_IPAddressFamily_new_null() SKM_sk_new_null(IPAddressFamily)
#define sk_IPAddressFamily_free(st) SKM_sk_free(IPAddressFamily, st)
#define sk_IPAddressFamily_num(st) SKM_sk_num(IPAddressFamily, st)
#define sk_IPAddressFamily_value(st, i) SKM_sk_value(IPAddressFamily, st, i)
#define sk_IPAddressFamily_set(st, i, val) SKM_sk_set(IPAddressFamily, st, i, val)
#define sk_IPAddressFamily_zero(st) SKM_sk_zero(IPAddressFamily, st)
#define sk_IPAddressFamily_push(st, val) SKM_sk_push(IPAddressFamily, st, val)
#define sk_IPAddressFamily_unshift(st, val) SKM_sk_unshift(IPAddressFamily, st, val)
#define sk_IPAddressFamily_find(st, val) SKM_sk_find(IPAddressFamily, st, val)
#define sk_IPAddressFamily_find_ex(st, val) SKM_sk_find_ex(IPAddressFamily, st, val)
#define sk_IPAddressFamily_delete(st, i) SKM_sk_delete(IPAddressFamily, st, i)
#define sk_IPAddressFamily_delete_ptr(st, ptr_) SKM_sk_delete_ptr(IPAddressFamily, st, ptr_)
#define sk_IPAddressFamily_insert(st, val, i) SKM_sk_insert(IPAddressFamily, st, val, i)
#define sk_IPAddressFamily_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(IPAddressFamily, st, cmp)
#define sk_IPAddressFamily_dup(st) SKM_sk_dup(IPAddressFamily, st)
#define sk_IPAddressFamily_pop_free(st, free_func) SKM_sk_pop_free(IPAddressFamily, st, free_func)
#define sk_IPAddressFamily_shift(st) SKM_sk_shift(IPAddressFamily, st)
#define sk_IPAddressFamily_pop(st) SKM_sk_pop(IPAddressFamily, st)
#define sk_IPAddressFamily_sort(st) SKM_sk_sort(IPAddressFamily, st)
#define sk_IPAddressFamily_is_sorted(st) SKM_sk_is_sorted(IPAddressFamily, st)

#define sk_IPAddressOrRange_new(cmp) SKM_sk_new(IPAddressOrRange, cmp)
#define sk_IPAddressOrRange_new_null() SKM_sk_new_null(IPAddressOrRange)
#define sk_IPAddressOrRange_free(st) SKM_sk_free(IPAddressOrRange, st)
#define sk_IPAddressOrRange_num(st) SKM_sk_num(IPAddressOrRange, st)
#define sk_IPAddressOrRange_value(st, i) SKM_sk_value(IPAddressOrRange, st, i)
#define sk_IPAddressOrRange_set(st, i, val) SKM_sk_set(IPAddressOrRange, st, i, val)
#define sk_IPAddressOrRange_zero(st) SKM_sk_zero(IPAddressOrRange, st)
#define sk_IPAddressOrRange_push(st, val) SKM_sk_push(IPAddressOrRange, st, val)
#define sk_IPAddressOrRange_unshift(st, val) SKM_sk_unshift(IPAddressOrRange, st, val)
#define sk_IPAddressOrRange_find(st, val) SKM_sk_find(IPAddressOrRange, st, val)
#define sk_IPAddressOrRange_find_ex(st, val) SKM_sk_find_ex(IPAddressOrRange, st, val)
#define sk_IPAddressOrRange_delete(st, i) SKM_sk_delete(IPAddressOrRange, st, i)
#define sk_IPAddressOrRange_delete_ptr(st, ptr_) SKM_sk_delete_ptr(IPAddressOrRange, st, ptr_)
#define sk_IPAddressOrRange_insert(st, val, i) SKM_sk_insert(IPAddressOrRange, st, val, i)
#define sk_IPAddressOrRange_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(IPAddressOrRange, st, cmp)
#define sk_IPAddressOrRange_dup(st) SKM_sk_dup(IPAddressOrRange, st)
#define sk_IPAddressOrRange_pop_free(st, free_func) SKM_sk_pop_free(IPAddressOrRange, st, free_func)
#define sk_IPAddressOrRange_shift(st) SKM_sk_shift(IPAddressOrRange, st)
#define sk_IPAddressOrRange_pop(st) SKM_sk_pop(IPAddressOrRange, st)
#define sk_IPAddressOrRange_sort(st) SKM_sk_sort(IPAddressOrRange, st)
#define sk_IPAddressOrRange_is_sorted(st) SKM_sk_is_sorted(IPAddressOrRange, st)

#define sk_MEM_OBJECT_DATA_new(cmp) SKM_sk_new(MEM_OBJECT_DATA, cmp)
#define sk_MEM_OBJECT_DATA_new_null() SKM_sk_new_null(MEM_OBJECT_DATA)
#define sk_MEM_OBJECT_DATA_free(st) SKM_sk_free(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_num(st) SKM_sk_num(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_value(st, i) SKM_sk_value(MEM_OBJECT_DATA, st, i)
#define sk_MEM_OBJECT_DATA_set(st, i, val) SKM_sk_set(MEM_OBJECT_DATA, st, i, val)
#define sk_MEM_OBJECT_DATA_zero(st) SKM_sk_zero(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_push(st, val) SKM_sk_push(MEM_OBJECT_DATA, st, val)
#define sk_MEM_OBJECT_DATA_unshift(st, val) SKM_sk_unshift(MEM_OBJECT_DATA, st, val)
#define sk_MEM_OBJECT_DATA_find(st, val) SKM_sk_find(MEM_OBJECT_DATA, st, val)
#define sk_MEM_OBJECT_DATA_find_ex(st, val) SKM_sk_find_ex(MEM_OBJECT_DATA, st, val)
#define sk_MEM_OBJECT_DATA_delete(st, i) SKM_sk_delete(MEM_OBJECT_DATA, st, i)
#define sk_MEM_OBJECT_DATA_delete_ptr(st, ptr_) SKM_sk_delete_ptr(MEM_OBJECT_DATA, st, ptr_)
#define sk_MEM_OBJECT_DATA_insert(st, val, i) SKM_sk_insert(MEM_OBJECT_DATA, st, val, i)
#define sk_MEM_OBJECT_DATA_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(MEM_OBJECT_DATA, st, cmp)
#define sk_MEM_OBJECT_DATA_dup(st) SKM_sk_dup(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_pop_free(st, free_func) SKM_sk_pop_free(MEM_OBJECT_DATA, st, free_func)
#define sk_MEM_OBJECT_DATA_shift(st) SKM_sk_shift(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_pop(st) SKM_sk_pop(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_sort(st) SKM_sk_sort(MEM_OBJECT_DATA, st)
#define sk_MEM_OBJECT_DATA_is_sorted(st) SKM_sk_is_sorted(MEM_OBJECT_DATA, st)

#define sk_MIME_HEADER_new(cmp) SKM_sk_new(MIME_HEADER, cmp)
#define sk_MIME_HEADER_new_null() SKM_sk_new_null(MIME_HEADER)
#define sk_MIME_HEADER_free(st) SKM_sk_free(MIME_HEADER, st)
#define sk_MIME_HEADER_num(st) SKM_sk_num(MIME_HEADER, st)
#define sk_MIME_HEADER_value(st, i) SKM_sk_value(MIME_HEADER, st, i)
#define sk_MIME_HEADER_set(st, i, val) SKM_sk_set(MIME_HEADER, st, i, val)
#define sk_MIME_HEADER_zero(st) SKM_sk_zero(MIME_HEADER, st)
#define sk_MIME_HEADER_push(st, val) SKM_sk_push(MIME_HEADER, st, val)
#define sk_MIME_HEADER_unshift(st, val) SKM_sk_unshift(MIME_HEADER, st, val)
#define sk_MIME_HEADER_find(st, val) SKM_sk_find(MIME_HEADER, st, val)
#define sk_MIME_HEADER_find_ex(st, val) SKM_sk_find_ex(MIME_HEADER, st, val)
#define sk_MIME_HEADER_delete(st, i) SKM_sk_delete(MIME_HEADER, st, i)
#define sk_MIME_HEADER_delete_ptr(st, ptr_) SKM_sk_delete_ptr(MIME_HEADER, st, ptr_)
#define sk_MIME_HEADER_insert(st, val, i) SKM_sk_insert(MIME_HEADER, st, val, i)
#define sk_MIME_HEADER_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(MIME_HEADER, st, cmp)
#define sk_MIME_HEADER_dup(st) SKM_sk_dup(MIME_HEADER, st)
#define sk_MIME_HEADER_pop_free(st, free_func) SKM_sk_pop_free(MIME_HEADER, st, free_func)
#define sk_MIME_HEADER_shift(st) SKM_sk_shift(MIME_HEADER, st)
#define sk_MIME_HEADER_pop(st) SKM_sk_pop(MIME_HEADER, st)
#define sk_MIME_HEADER_sort(st) SKM_sk_sort(MIME_HEADER, st)
#define sk_MIME_HEADER_is_sorted(st) SKM_sk_is_sorted(MIME_HEADER, st)

#define sk_MIME_PARAM_new(cmp) SKM_sk_new(MIME_PARAM, cmp)
#define sk_MIME_PARAM_new_null() SKM_sk_new_null(MIME_PARAM)
#define sk_MIME_PARAM_free(st) SKM_sk_free(MIME_PARAM, st)
#define sk_MIME_PARAM_num(st) SKM_sk_num(MIME_PARAM, st)
#define sk_MIME_PARAM_value(st, i) SKM_sk_value(MIME_PARAM, st, i)
#define sk_MIME_PARAM_set(st, i, val) SKM_sk_set(MIME_PARAM, st, i, val)
#define sk_MIME_PARAM_zero(st) SKM_sk_zero(MIME_PARAM, st)
#define sk_MIME_PARAM_push(st, val) SKM_sk_push(MIME_PARAM, st, val)
#define sk_MIME_PARAM_unshift(st, val) SKM_sk_unshift(MIME_PARAM, st, val)
#define sk_MIME_PARAM_find(st, val) SKM_sk_find(MIME_PARAM, st, val)
#define sk_MIME_PARAM_find_ex(st, val) SKM_sk_find_ex(MIME_PARAM, st, val)
#define sk_MIME_PARAM_delete(st, i) SKM_sk_delete(MIME_PARAM, st, i)
#define sk_MIME_PARAM_delete_ptr(st, ptr_) SKM_sk_delete_ptr(MIME_PARAM, st, ptr_)
#define sk_MIME_PARAM_insert(st, val, i) SKM_sk_insert(MIME_PARAM, st, val, i)
#define sk_MIME_PARAM_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(MIME_PARAM, st, cmp)
#define sk_MIME_PARAM_dup(st) SKM_sk_dup(MIME_PARAM, st)
#define sk_MIME_PARAM_pop_free(st, free_func) SKM_sk_pop_free(MIME_PARAM, st, free_func)
#define sk_MIME_PARAM_shift(st) SKM_sk_shift(MIME_PARAM, st)
#define sk_MIME_PARAM_pop(st) SKM_sk_pop(MIME_PARAM, st)
#define sk_MIME_PARAM_sort(st) SKM_sk_sort(MIME_PARAM, st)
#define sk_MIME_PARAM_is_sorted(st) SKM_sk_is_sorted(MIME_PARAM, st)

#define sk_NAME_FUNCS_new(cmp) SKM_sk_new(NAME_FUNCS, cmp)
#define sk_NAME_FUNCS_new_null() SKM_sk_new_null(NAME_FUNCS)
#define sk_NAME_FUNCS_free(st) SKM_sk_free(NAME_FUNCS, st)
#define sk_NAME_FUNCS_num(st) SKM_sk_num(NAME_FUNCS, st)
#define sk_NAME_FUNCS_value(st, i) SKM_sk_value(NAME_FUNCS, st, i)
#define sk_NAME_FUNCS_set(st, i, val) SKM_sk_set(NAME_FUNCS, st, i, val)
#define sk_NAME_FUNCS_zero(st) SKM_sk_zero(NAME_FUNCS, st)
#define sk_NAME_FUNCS_push(st, val) SKM_sk_push(NAME_FUNCS, st, val)
#define sk_NAME_FUNCS_unshift(st, val) SKM_sk_unshift(NAME_FUNCS, st, val)
#define sk_NAME_FUNCS_find(st, val) SKM_sk_find(NAME_FUNCS, st, val)
#define sk_NAME_FUNCS_find_ex(st, val) SKM_sk_find_ex(NAME_FUNCS, st, val)
#define sk_NAME_FUNCS_delete(st, i) SKM_sk_delete(NAME_FUNCS, st, i)
#define sk_NAME_FUNCS_delete_ptr(st, ptr_) SKM_sk_delete_ptr(NAME_FUNCS, st, ptr_)
#define sk_NAME_FUNCS_insert(st, val, i) SKM_sk_insert(NAME_FUNCS, st, val, i)
#define sk_NAME_FUNCS_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(NAME_FUNCS, st, cmp)
#define sk_NAME_FUNCS_dup(st) SKM_sk_dup(NAME_FUNCS, st)
#define sk_NAME_FUNCS_pop_free(st, free_func) SKM_sk_pop_free(NAME_FUNCS, st, free_func)
#define sk_NAME_FUNCS_shift(st) SKM_sk_shift(NAME_FUNCS, st)
#define sk_NAME_FUNCS_pop(st) SKM_sk_pop(NAME_FUNCS, st)
#define sk_NAME_FUNCS_sort(st) SKM_sk_sort(NAME_FUNCS, st)
#define sk_NAME_FUNCS_is_sorted(st) SKM_sk_is_sorted(NAME_FUNCS, st)

#define sk_OCSP_CERTID_new(cmp) SKM_sk_new(libressl_d.openssl.ocsp.OCSP_CERTID, cmp)
#define sk_OCSP_CERTID_new_null() SKM_sk_new_null(libressl_d.openssl.ocsp.OCSP_CERTID)
#define sk_OCSP_CERTID_free(st) SKM_sk_free(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_num(st) SKM_sk_num(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_value(st, i) SKM_sk_value(libressl_d.openssl.ocsp.OCSP_CERTID, st, i)
#define sk_OCSP_CERTID_set(st, i, val) SKM_sk_set(libressl_d.openssl.ocsp.OCSP_CERTID, st, i, val)
#define sk_OCSP_CERTID_zero(st) SKM_sk_zero(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_push(st, val) SKM_sk_push(libressl_d.openssl.ocsp.OCSP_CERTID, st, val)
#define sk_OCSP_CERTID_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ocsp.OCSP_CERTID, st, val)
#define sk_OCSP_CERTID_find(st, val) SKM_sk_find(libressl_d.openssl.ocsp.OCSP_CERTID, st, val)
#define sk_OCSP_CERTID_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ocsp.OCSP_CERTID, st, val)
#define sk_OCSP_CERTID_delete(st, i) SKM_sk_delete(libressl_d.openssl.ocsp.OCSP_CERTID, st, i)
#define sk_OCSP_CERTID_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ocsp.OCSP_CERTID, st, ptr_)
#define sk_OCSP_CERTID_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ocsp.OCSP_CERTID, st, val, i)
#define sk_OCSP_CERTID_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ocsp.OCSP_CERTID, st, cmp)
#define sk_OCSP_CERTID_dup(st) SKM_sk_dup(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ocsp.OCSP_CERTID, st, free_func)
#define sk_OCSP_CERTID_shift(st) SKM_sk_shift(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_pop(st) SKM_sk_pop(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_sort(st) SKM_sk_sort(libressl_d.openssl.ocsp.OCSP_CERTID, st)
#define sk_OCSP_CERTID_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ocsp.OCSP_CERTID, st)

#define sk_OCSP_ONEREQ_new(cmp) SKM_sk_new(libressl_d.openssl.ocsp.OCSP_ONEREQ, cmp)
#define sk_OCSP_ONEREQ_new_null() SKM_sk_new_null(libressl_d.openssl.ocsp.OCSP_ONEREQ)
#define sk_OCSP_ONEREQ_free(st) SKM_sk_free(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_num(st) SKM_sk_num(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_value(st, i) SKM_sk_value(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, i)
#define sk_OCSP_ONEREQ_set(st, i, val) SKM_sk_set(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, i, val)
#define sk_OCSP_ONEREQ_zero(st) SKM_sk_zero(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_push(st, val) SKM_sk_push(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, val)
#define sk_OCSP_ONEREQ_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, val)
#define sk_OCSP_ONEREQ_find(st, val) SKM_sk_find(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, val)
#define sk_OCSP_ONEREQ_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, val)
#define sk_OCSP_ONEREQ_delete(st, i) SKM_sk_delete(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, i)
#define sk_OCSP_ONEREQ_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, ptr_)
#define sk_OCSP_ONEREQ_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, val, i)
#define sk_OCSP_ONEREQ_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, cmp)
#define sk_OCSP_ONEREQ_dup(st) SKM_sk_dup(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ocsp.OCSP_ONEREQ, st, free_func)
#define sk_OCSP_ONEREQ_shift(st) SKM_sk_shift(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_pop(st) SKM_sk_pop(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_sort(st) SKM_sk_sort(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)
#define sk_OCSP_ONEREQ_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ocsp.OCSP_ONEREQ, st)

#define sk_OCSP_RESPID_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.OCSP_RESPID, cmp)
#define sk_OCSP_RESPID_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.OCSP_RESPID)
#define sk_OCSP_RESPID_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, i)
#define sk_OCSP_RESPID_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, i, val)
#define sk_OCSP_RESPID_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, val)
#define sk_OCSP_RESPID_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, val)
#define sk_OCSP_RESPID_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, val)
#define sk_OCSP_RESPID_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, val)
#define sk_OCSP_RESPID_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, i)
#define sk_OCSP_RESPID_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, ptr_)
#define sk_OCSP_RESPID_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, val, i)
#define sk_OCSP_RESPID_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, cmp)
#define sk_OCSP_RESPID_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.OCSP_RESPID, st, free_func)
#define sk_OCSP_RESPID_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)
#define sk_OCSP_RESPID_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.OCSP_RESPID, st)

#define sk_OCSP_SINGLERESP_new(cmp) SKM_sk_new(libressl_d.openssl.ocsp.OCSP_SINGLERESP, cmp)
#define sk_OCSP_SINGLERESP_new_null() SKM_sk_new_null(libressl_d.openssl.ocsp.OCSP_SINGLERESP)
#define sk_OCSP_SINGLERESP_free(st) SKM_sk_free(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_num(st) SKM_sk_num(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_value(st, i) SKM_sk_value(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, i)
#define sk_OCSP_SINGLERESP_set(st, i, val) SKM_sk_set(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, i, val)
#define sk_OCSP_SINGLERESP_zero(st) SKM_sk_zero(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_push(st, val) SKM_sk_push(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, val)
#define sk_OCSP_SINGLERESP_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, val)
#define sk_OCSP_SINGLERESP_find(st, val) SKM_sk_find(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, val)
#define sk_OCSP_SINGLERESP_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, val)
#define sk_OCSP_SINGLERESP_delete(st, i) SKM_sk_delete(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, i)
#define sk_OCSP_SINGLERESP_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, ptr_)
#define sk_OCSP_SINGLERESP_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, val, i)
#define sk_OCSP_SINGLERESP_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, cmp)
#define sk_OCSP_SINGLERESP_dup(st) SKM_sk_dup(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st, free_func)
#define sk_OCSP_SINGLERESP_shift(st) SKM_sk_shift(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_pop(st) SKM_sk_pop(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_sort(st) SKM_sk_sort(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)
#define sk_OCSP_SINGLERESP_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ocsp.OCSP_SINGLERESP, st)

#define sk_PKCS12_SAFEBAG_new(cmp) SKM_sk_new(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, cmp)
#define sk_PKCS12_SAFEBAG_new_null() SKM_sk_new_null(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG)
#define sk_PKCS12_SAFEBAG_free(st) SKM_sk_free(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_num(st) SKM_sk_num(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_value(st, i) SKM_sk_value(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, i)
#define sk_PKCS12_SAFEBAG_set(st, i, val) SKM_sk_set(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, i, val)
#define sk_PKCS12_SAFEBAG_zero(st) SKM_sk_zero(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_push(st, val) SKM_sk_push(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, val)
#define sk_PKCS12_SAFEBAG_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, val)
#define sk_PKCS12_SAFEBAG_find(st, val) SKM_sk_find(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, val)
#define sk_PKCS12_SAFEBAG_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, val)
#define sk_PKCS12_SAFEBAG_delete(st, i) SKM_sk_delete(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, i)
#define sk_PKCS12_SAFEBAG_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, ptr_)
#define sk_PKCS12_SAFEBAG_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, val, i)
#define sk_PKCS12_SAFEBAG_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, cmp)
#define sk_PKCS12_SAFEBAG_dup(st) SKM_sk_dup(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st, free_func)
#define sk_PKCS12_SAFEBAG_shift(st) SKM_sk_shift(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_pop(st) SKM_sk_pop(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_sort(st) SKM_sk_sort(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)
#define sk_PKCS12_SAFEBAG_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.pkcs12.PKCS12_SAFEBAG, st)

#define sk_PKCS7_new(cmp) SKM_sk_new(libressl_d.openssl.pkcs7.PKCS7, cmp)
#define sk_PKCS7_new_null() SKM_sk_new_null(libressl_d.openssl.pkcs7.PKCS7)
#define sk_PKCS7_free(st) SKM_sk_free(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_num(st) SKM_sk_num(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_value(st, i) SKM_sk_value(libressl_d.openssl.pkcs7.PKCS7, st, i)
#define sk_PKCS7_set(st, i, val) SKM_sk_set(libressl_d.openssl.pkcs7.PKCS7, st, i, val)
#define sk_PKCS7_zero(st) SKM_sk_zero(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_push(st, val) SKM_sk_push(libressl_d.openssl.pkcs7.PKCS7, st, val)
#define sk_PKCS7_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.pkcs7.PKCS7, st, val)
#define sk_PKCS7_find(st, val) SKM_sk_find(libressl_d.openssl.pkcs7.PKCS7, st, val)
#define sk_PKCS7_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.pkcs7.PKCS7, st, val)
#define sk_PKCS7_delete(st, i) SKM_sk_delete(libressl_d.openssl.pkcs7.PKCS7, st, i)
#define sk_PKCS7_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.pkcs7.PKCS7, st, ptr_)
#define sk_PKCS7_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.pkcs7.PKCS7, st, val, i)
#define sk_PKCS7_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.pkcs7.PKCS7, st, cmp)
#define sk_PKCS7_dup(st) SKM_sk_dup(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.pkcs7.PKCS7, st, free_func)
#define sk_PKCS7_shift(st) SKM_sk_shift(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_pop(st) SKM_sk_pop(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_sort(st) SKM_sk_sort(libressl_d.openssl.pkcs7.PKCS7, st)
#define sk_PKCS7_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.pkcs7.PKCS7, st)

#define sk_PKCS7_RECIP_INFO_new(cmp) SKM_sk_new(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, cmp)
#define sk_PKCS7_RECIP_INFO_new_null() SKM_sk_new_null(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO)
#define sk_PKCS7_RECIP_INFO_free(st) SKM_sk_free(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_num(st) SKM_sk_num(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_value(st, i) SKM_sk_value(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, i)
#define sk_PKCS7_RECIP_INFO_set(st, i, val) SKM_sk_set(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, i, val)
#define sk_PKCS7_RECIP_INFO_zero(st) SKM_sk_zero(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_push(st, val) SKM_sk_push(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, val)
#define sk_PKCS7_RECIP_INFO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, val)
#define sk_PKCS7_RECIP_INFO_find(st, val) SKM_sk_find(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, val)
#define sk_PKCS7_RECIP_INFO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, val)
#define sk_PKCS7_RECIP_INFO_delete(st, i) SKM_sk_delete(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, i)
#define sk_PKCS7_RECIP_INFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, ptr_)
#define sk_PKCS7_RECIP_INFO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, val, i)
#define sk_PKCS7_RECIP_INFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, cmp)
#define sk_PKCS7_RECIP_INFO_dup(st) SKM_sk_dup(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st, free_func)
#define sk_PKCS7_RECIP_INFO_shift(st) SKM_sk_shift(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_pop(st) SKM_sk_pop(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_sort(st) SKM_sk_sort(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)
#define sk_PKCS7_RECIP_INFO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.pkcs7.PKCS7_RECIP_INFO, st)

#define sk_PKCS7_SIGNER_INFO_new(cmp) SKM_sk_new(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, cmp)
#define sk_PKCS7_SIGNER_INFO_new_null() SKM_sk_new_null(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO)
#define sk_PKCS7_SIGNER_INFO_free(st) SKM_sk_free(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_num(st) SKM_sk_num(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_value(st, i) SKM_sk_value(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, i)
#define sk_PKCS7_SIGNER_INFO_set(st, i, val) SKM_sk_set(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, i, val)
#define sk_PKCS7_SIGNER_INFO_zero(st) SKM_sk_zero(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_push(st, val) SKM_sk_push(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, val)
#define sk_PKCS7_SIGNER_INFO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, val)
#define sk_PKCS7_SIGNER_INFO_find(st, val) SKM_sk_find(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, val)
#define sk_PKCS7_SIGNER_INFO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, val)
#define sk_PKCS7_SIGNER_INFO_delete(st, i) SKM_sk_delete(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, i)
#define sk_PKCS7_SIGNER_INFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, ptr_)
#define sk_PKCS7_SIGNER_INFO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, val, i)
#define sk_PKCS7_SIGNER_INFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, cmp)
#define sk_PKCS7_SIGNER_INFO_dup(st) SKM_sk_dup(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st, free_func)
#define sk_PKCS7_SIGNER_INFO_shift(st) SKM_sk_shift(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_pop(st) SKM_sk_pop(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_sort(st) SKM_sk_sort(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)
#define sk_PKCS7_SIGNER_INFO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.pkcs7.PKCS7_SIGNER_INFO, st)

#define sk_POLICYINFO_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.POLICYINFO, cmp)
#define sk_POLICYINFO_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.POLICYINFO)
#define sk_POLICYINFO_free(st) SKM_sk_free(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_num(st) SKM_sk_num(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.POLICYINFO, st, i)
#define sk_POLICYINFO_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.POLICYINFO, st, i, val)
#define sk_POLICYINFO_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.POLICYINFO, st, val)
#define sk_POLICYINFO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.POLICYINFO, st, val)
#define sk_POLICYINFO_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.POLICYINFO, st, val)
#define sk_POLICYINFO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.POLICYINFO, st, val)
#define sk_POLICYINFO_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.POLICYINFO, st, i)
#define sk_POLICYINFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.POLICYINFO, st, ptr_)
#define sk_POLICYINFO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.POLICYINFO, st, val, i)
#define sk_POLICYINFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.POLICYINFO, st, cmp)
#define sk_POLICYINFO_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.POLICYINFO, st, free_func)
#define sk_POLICYINFO_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.POLICYINFO, st)
#define sk_POLICYINFO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.POLICYINFO, st)

#define sk_POLICYQUALINFO_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.POLICYQUALINFO, cmp)
#define sk_POLICYQUALINFO_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.POLICYQUALINFO)
#define sk_POLICYQUALINFO_free(st) SKM_sk_free(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_num(st) SKM_sk_num(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.POLICYQUALINFO, st, i)
#define sk_POLICYQUALINFO_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.POLICYQUALINFO, st, i, val)
#define sk_POLICYQUALINFO_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.POLICYQUALINFO, st, val)
#define sk_POLICYQUALINFO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.POLICYQUALINFO, st, val)
#define sk_POLICYQUALINFO_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.POLICYQUALINFO, st, val)
#define sk_POLICYQUALINFO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.POLICYQUALINFO, st, val)
#define sk_POLICYQUALINFO_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.POLICYQUALINFO, st, i)
#define sk_POLICYQUALINFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.POLICYQUALINFO, st, ptr_)
#define sk_POLICYQUALINFO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.POLICYQUALINFO, st, val, i)
#define sk_POLICYQUALINFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.POLICYQUALINFO, st, cmp)
#define sk_POLICYQUALINFO_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.POLICYQUALINFO, st, free_func)
#define sk_POLICYQUALINFO_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.POLICYQUALINFO, st)
#define sk_POLICYQUALINFO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.POLICYQUALINFO, st)

#define sk_POLICY_MAPPING_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.POLICY_MAPPING, cmp)
#define sk_POLICY_MAPPING_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.POLICY_MAPPING)
#define sk_POLICY_MAPPING_free(st) SKM_sk_free(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_num(st) SKM_sk_num(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.POLICY_MAPPING, st, i)
#define sk_POLICY_MAPPING_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.POLICY_MAPPING, st, i, val)
#define sk_POLICY_MAPPING_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.POLICY_MAPPING, st, val)
#define sk_POLICY_MAPPING_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.POLICY_MAPPING, st, val)
#define sk_POLICY_MAPPING_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.POLICY_MAPPING, st, val)
#define sk_POLICY_MAPPING_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.POLICY_MAPPING, st, val)
#define sk_POLICY_MAPPING_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.POLICY_MAPPING, st, i)
#define sk_POLICY_MAPPING_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.POLICY_MAPPING, st, ptr_)
#define sk_POLICY_MAPPING_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.POLICY_MAPPING, st, val, i)
#define sk_POLICY_MAPPING_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.POLICY_MAPPING, st, cmp)
#define sk_POLICY_MAPPING_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.POLICY_MAPPING, st, free_func)
#define sk_POLICY_MAPPING_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.POLICY_MAPPING, st)
#define sk_POLICY_MAPPING_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.POLICY_MAPPING, st)

#define sk_SRTP_PROTECTION_PROFILE_new(cmp) SKM_sk_new(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, cmp)
#define sk_SRTP_PROTECTION_PROFILE_new_null() SKM_sk_new_null(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE)
#define sk_SRTP_PROTECTION_PROFILE_free(st) SKM_sk_free(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_num(st) SKM_sk_num(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_value(st, i) SKM_sk_value(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, i)
#define sk_SRTP_PROTECTION_PROFILE_set(st, i, val) SKM_sk_set(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, i, val)
#define sk_SRTP_PROTECTION_PROFILE_zero(st) SKM_sk_zero(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_push(st, val) SKM_sk_push(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, val)
#define sk_SRTP_PROTECTION_PROFILE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, val)
#define sk_SRTP_PROTECTION_PROFILE_find(st, val) SKM_sk_find(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, val)
#define sk_SRTP_PROTECTION_PROFILE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, val)
#define sk_SRTP_PROTECTION_PROFILE_delete(st, i) SKM_sk_delete(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, i)
#define sk_SRTP_PROTECTION_PROFILE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, ptr_)
#define sk_SRTP_PROTECTION_PROFILE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, val, i)
#define sk_SRTP_PROTECTION_PROFILE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, cmp)
#define sk_SRTP_PROTECTION_PROFILE_dup(st) SKM_sk_dup(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st, free_func)
#define sk_SRTP_PROTECTION_PROFILE_shift(st) SKM_sk_shift(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_pop(st) SKM_sk_pop(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_sort(st) SKM_sk_sort(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)
#define sk_SRTP_PROTECTION_PROFILE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ssl.SRTP_PROTECTION_PROFILE, st)

#define sk_SSL_CIPHER_new(cmp) SKM_sk_new(libressl_d.openssl.ssl.SSL_CIPHER, cmp)
#define sk_SSL_CIPHER_new_null() SKM_sk_new_null(libressl_d.openssl.ssl.SSL_CIPHER)
#define sk_SSL_CIPHER_free(st) SKM_sk_free(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_num(st) SKM_sk_num(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_value(st, i) SKM_sk_value(libressl_d.openssl.ssl.SSL_CIPHER, st, i)
#define sk_SSL_CIPHER_set(st, i, val) SKM_sk_set(libressl_d.openssl.ssl.SSL_CIPHER, st, i, val)
#define sk_SSL_CIPHER_zero(st) SKM_sk_zero(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_push(st, val) SKM_sk_push(libressl_d.openssl.ssl.SSL_CIPHER, st, val)
#define sk_SSL_CIPHER_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ssl.SSL_CIPHER, st, val)
#define sk_SSL_CIPHER_find(st, val) SKM_sk_find(libressl_d.openssl.ssl.SSL_CIPHER, st, val)
#define sk_SSL_CIPHER_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ssl.SSL_CIPHER, st, val)
#define sk_SSL_CIPHER_delete(st, i) SKM_sk_delete(libressl_d.openssl.ssl.SSL_CIPHER, st, i)
#define sk_SSL_CIPHER_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ssl.SSL_CIPHER, st, ptr_)
#define sk_SSL_CIPHER_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ssl.SSL_CIPHER, st, val, i)
#define sk_SSL_CIPHER_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ssl.SSL_CIPHER, st, cmp)
#define sk_SSL_CIPHER_dup(st) SKM_sk_dup(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ssl.SSL_CIPHER, st, free_func)
#define sk_SSL_CIPHER_shift(st) SKM_sk_shift(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_pop(st) SKM_sk_pop(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_sort(st) SKM_sk_sort(libressl_d.openssl.ssl.SSL_CIPHER, st)
#define sk_SSL_CIPHER_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ssl.SSL_CIPHER, st)

#define sk_SSL_COMP_new(cmp) SKM_sk_new(libressl_d.openssl.ssl.SSL_COMP, cmp)
#define sk_SSL_COMP_new_null() SKM_sk_new_null(libressl_d.openssl.ssl.SSL_COMP)
#define sk_SSL_COMP_free(st) SKM_sk_free(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_num(st) SKM_sk_num(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_value(st, i) SKM_sk_value(libressl_d.openssl.ssl.SSL_COMP, st, i)
#define sk_SSL_COMP_set(st, i, val) SKM_sk_set(libressl_d.openssl.ssl.SSL_COMP, st, i, val)
#define sk_SSL_COMP_zero(st) SKM_sk_zero(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_push(st, val) SKM_sk_push(libressl_d.openssl.ssl.SSL_COMP, st, val)
#define sk_SSL_COMP_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ssl.SSL_COMP, st, val)
#define sk_SSL_COMP_find(st, val) SKM_sk_find(libressl_d.openssl.ssl.SSL_COMP, st, val)
#define sk_SSL_COMP_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ssl.SSL_COMP, st, val)
#define sk_SSL_COMP_delete(st, i) SKM_sk_delete(libressl_d.openssl.ssl.SSL_COMP, st, i)
#define sk_SSL_COMP_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ssl.SSL_COMP, st, ptr_)
#define sk_SSL_COMP_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ssl.SSL_COMP, st, val, i)
#define sk_SSL_COMP_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ssl.SSL_COMP, st, cmp)
#define sk_SSL_COMP_dup(st) SKM_sk_dup(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ssl.SSL_COMP, st, free_func)
#define sk_SSL_COMP_shift(st) SKM_sk_shift(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_pop(st) SKM_sk_pop(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_sort(st) SKM_sk_sort(libressl_d.openssl.ssl.SSL_COMP, st)
#define sk_SSL_COMP_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ssl.SSL_COMP, st)

#define sk_STACK_OF_X509_NAME_ENTRY_new(cmp) SKM_sk_new(STACK_OF_X509_NAME_ENTRY, cmp)
#define sk_STACK_OF_X509_NAME_ENTRY_new_null() SKM_sk_new_null(STACK_OF_X509_NAME_ENTRY)
#define sk_STACK_OF_X509_NAME_ENTRY_free(st) SKM_sk_free(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_num(st) SKM_sk_num(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_value(st, i) SKM_sk_value(STACK_OF_X509_NAME_ENTRY, st, i)
#define sk_STACK_OF_X509_NAME_ENTRY_set(st, i, val) SKM_sk_set(STACK_OF_X509_NAME_ENTRY, st, i, val)
#define sk_STACK_OF_X509_NAME_ENTRY_zero(st) SKM_sk_zero(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_push(st, val) SKM_sk_push(STACK_OF_X509_NAME_ENTRY, st, val)
#define sk_STACK_OF_X509_NAME_ENTRY_unshift(st, val) SKM_sk_unshift(STACK_OF_X509_NAME_ENTRY, st, val)
#define sk_STACK_OF_X509_NAME_ENTRY_find(st, val) SKM_sk_find(STACK_OF_X509_NAME_ENTRY, st, val)
#define sk_STACK_OF_X509_NAME_ENTRY_find_ex(st, val) SKM_sk_find_ex(STACK_OF_X509_NAME_ENTRY, st, val)
#define sk_STACK_OF_X509_NAME_ENTRY_delete(st, i) SKM_sk_delete(STACK_OF_X509_NAME_ENTRY, st, i)
#define sk_STACK_OF_X509_NAME_ENTRY_delete_ptr(st, ptr_) SKM_sk_delete_ptr(STACK_OF_X509_NAME_ENTRY, st, ptr_)
#define sk_STACK_OF_X509_NAME_ENTRY_insert(st, val, i) SKM_sk_insert(STACK_OF_X509_NAME_ENTRY, st, val, i)
#define sk_STACK_OF_X509_NAME_ENTRY_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(STACK_OF_X509_NAME_ENTRY, st, cmp)
#define sk_STACK_OF_X509_NAME_ENTRY_dup(st) SKM_sk_dup(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_pop_free(st, free_func) SKM_sk_pop_free(STACK_OF_X509_NAME_ENTRY, st, free_func)
#define sk_STACK_OF_X509_NAME_ENTRY_shift(st) SKM_sk_shift(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_pop(st) SKM_sk_pop(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_sort(st) SKM_sk_sort(STACK_OF_X509_NAME_ENTRY, st)
#define sk_STACK_OF_X509_NAME_ENTRY_is_sorted(st) SKM_sk_is_sorted(STACK_OF_X509_NAME_ENTRY, st)

#define sk_STORE_ATTR_INFO_new(cmp) SKM_sk_new(STORE_ATTR_INFO, cmp)
#define sk_STORE_ATTR_INFO_new_null() SKM_sk_new_null(STORE_ATTR_INFO)
#define sk_STORE_ATTR_INFO_free(st) SKM_sk_free(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_num(st) SKM_sk_num(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_value(st, i) SKM_sk_value(STORE_ATTR_INFO, st, i)
#define sk_STORE_ATTR_INFO_set(st, i, val) SKM_sk_set(STORE_ATTR_INFO, st, i, val)
#define sk_STORE_ATTR_INFO_zero(st) SKM_sk_zero(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_push(st, val) SKM_sk_push(STORE_ATTR_INFO, st, val)
#define sk_STORE_ATTR_INFO_unshift(st, val) SKM_sk_unshift(STORE_ATTR_INFO, st, val)
#define sk_STORE_ATTR_INFO_find(st, val) SKM_sk_find(STORE_ATTR_INFO, st, val)
#define sk_STORE_ATTR_INFO_find_ex(st, val) SKM_sk_find_ex(STORE_ATTR_INFO, st, val)
#define sk_STORE_ATTR_INFO_delete(st, i) SKM_sk_delete(STORE_ATTR_INFO, st, i)
#define sk_STORE_ATTR_INFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(STORE_ATTR_INFO, st, ptr_)
#define sk_STORE_ATTR_INFO_insert(st, val, i) SKM_sk_insert(STORE_ATTR_INFO, st, val, i)
#define sk_STORE_ATTR_INFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(STORE_ATTR_INFO, st, cmp)
#define sk_STORE_ATTR_INFO_dup(st) SKM_sk_dup(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_pop_free(st, free_func) SKM_sk_pop_free(STORE_ATTR_INFO, st, free_func)
#define sk_STORE_ATTR_INFO_shift(st) SKM_sk_shift(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_pop(st) SKM_sk_pop(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_sort(st) SKM_sk_sort(STORE_ATTR_INFO, st)
#define sk_STORE_ATTR_INFO_is_sorted(st) SKM_sk_is_sorted(STORE_ATTR_INFO, st)

#define sk_STORE_OBJECT_new(cmp) SKM_sk_new(STORE_OBJECT, cmp)
#define sk_STORE_OBJECT_new_null() SKM_sk_new_null(STORE_OBJECT)
#define sk_STORE_OBJECT_free(st) SKM_sk_free(STORE_OBJECT, st)
#define sk_STORE_OBJECT_num(st) SKM_sk_num(STORE_OBJECT, st)
#define sk_STORE_OBJECT_value(st, i) SKM_sk_value(STORE_OBJECT, st, i)
#define sk_STORE_OBJECT_set(st, i, val) SKM_sk_set(STORE_OBJECT, st, i, val)
#define sk_STORE_OBJECT_zero(st) SKM_sk_zero(STORE_OBJECT, st)
#define sk_STORE_OBJECT_push(st, val) SKM_sk_push(STORE_OBJECT, st, val)
#define sk_STORE_OBJECT_unshift(st, val) SKM_sk_unshift(STORE_OBJECT, st, val)
#define sk_STORE_OBJECT_find(st, val) SKM_sk_find(STORE_OBJECT, st, val)
#define sk_STORE_OBJECT_find_ex(st, val) SKM_sk_find_ex(STORE_OBJECT, st, val)
#define sk_STORE_OBJECT_delete(st, i) SKM_sk_delete(STORE_OBJECT, st, i)
#define sk_STORE_OBJECT_delete_ptr(st, ptr_) SKM_sk_delete_ptr(STORE_OBJECT, st, ptr_)
#define sk_STORE_OBJECT_insert(st, val, i) SKM_sk_insert(STORE_OBJECT, st, val, i)
#define sk_STORE_OBJECT_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(STORE_OBJECT, st, cmp)
#define sk_STORE_OBJECT_dup(st) SKM_sk_dup(STORE_OBJECT, st)
#define sk_STORE_OBJECT_pop_free(st, free_func) SKM_sk_pop_free(STORE_OBJECT, st, free_func)
#define sk_STORE_OBJECT_shift(st) SKM_sk_shift(STORE_OBJECT, st)
#define sk_STORE_OBJECT_pop(st) SKM_sk_pop(STORE_OBJECT, st)
#define sk_STORE_OBJECT_sort(st) SKM_sk_sort(STORE_OBJECT, st)
#define sk_STORE_OBJECT_is_sorted(st) SKM_sk_is_sorted(STORE_OBJECT, st)

#define sk_SXNETID_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.SXNETID, cmp)
#define sk_SXNETID_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.SXNETID)
#define sk_SXNETID_free(st) SKM_sk_free(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_num(st) SKM_sk_num(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.SXNETID, st, i)
#define sk_SXNETID_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.SXNETID, st, i, val)
#define sk_SXNETID_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.SXNETID, st, val)
#define sk_SXNETID_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.SXNETID, st, val)
#define sk_SXNETID_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.SXNETID, st, val)
#define sk_SXNETID_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.SXNETID, st, val)
#define sk_SXNETID_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.SXNETID, st, i)
#define sk_SXNETID_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.SXNETID, st, ptr_)
#define sk_SXNETID_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.SXNETID, st, val, i)
#define sk_SXNETID_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.SXNETID, st, cmp)
#define sk_SXNETID_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.SXNETID, st, free_func)
#define sk_SXNETID_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.SXNETID, st)
#define sk_SXNETID_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.SXNETID, st)

#define sk_UI_STRING_new(cmp) SKM_sk_new(libressl_d.openssl.ui.UI_STRING, cmp)
#define sk_UI_STRING_new_null() SKM_sk_new_null(libressl_d.openssl.ui.UI_STRING)
#define sk_UI_STRING_free(st) SKM_sk_free(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_num(st) SKM_sk_num(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_value(st, i) SKM_sk_value(libressl_d.openssl.ui.UI_STRING, st, i)
#define sk_UI_STRING_set(st, i, val) SKM_sk_set(libressl_d.openssl.ui.UI_STRING, st, i, val)
#define sk_UI_STRING_zero(st) SKM_sk_zero(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_push(st, val) SKM_sk_push(libressl_d.openssl.ui.UI_STRING, st, val)
#define sk_UI_STRING_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ui.UI_STRING, st, val)
#define sk_UI_STRING_find(st, val) SKM_sk_find(libressl_d.openssl.ui.UI_STRING, st, val)
#define sk_UI_STRING_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ui.UI_STRING, st, val)
#define sk_UI_STRING_delete(st, i) SKM_sk_delete(libressl_d.openssl.ui.UI_STRING, st, i)
#define sk_UI_STRING_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ui.UI_STRING, st, ptr_)
#define sk_UI_STRING_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ui.UI_STRING, st, val, i)
#define sk_UI_STRING_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ui.UI_STRING, st, cmp)
#define sk_UI_STRING_dup(st) SKM_sk_dup(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ui.UI_STRING, st, free_func)
#define sk_UI_STRING_shift(st) SKM_sk_shift(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_pop(st) SKM_sk_pop(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_sort(st) SKM_sk_sort(libressl_d.openssl.ui.UI_STRING, st)
#define sk_UI_STRING_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ui.UI_STRING, st)

#define sk_X509_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509, cmp)
#define sk_X509_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509)
#define sk_X509_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509, st, i)
#define sk_X509_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509, st, i, val)
#define sk_X509_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509, st, val)
#define sk_X509_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509, st, val)
#define sk_X509_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509, st, val)
#define sk_X509_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509, st, val)
#define sk_X509_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509, st, i)
#define sk_X509_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509, st, ptr_)
#define sk_X509_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509, st, val, i)
#define sk_X509_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509, st, cmp)
#define sk_X509_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509, st, free_func)
#define sk_X509_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509, st)
#define sk_X509_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509, st)

#define sk_X509V3_EXT_METHOD_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, cmp)
#define sk_X509V3_EXT_METHOD_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.X509V3_EXT_METHOD)
#define sk_X509V3_EXT_METHOD_free(st) SKM_sk_free(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_num(st) SKM_sk_num(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, i)
#define sk_X509V3_EXT_METHOD_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, i, val)
#define sk_X509V3_EXT_METHOD_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, val)
#define sk_X509V3_EXT_METHOD_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, val)
#define sk_X509V3_EXT_METHOD_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, val)
#define sk_X509V3_EXT_METHOD_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, val)
#define sk_X509V3_EXT_METHOD_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, i)
#define sk_X509V3_EXT_METHOD_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, ptr_)
#define sk_X509V3_EXT_METHOD_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, val, i)
#define sk_X509V3_EXT_METHOD_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, cmp)
#define sk_X509V3_EXT_METHOD_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st, free_func)
#define sk_X509V3_EXT_METHOD_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)
#define sk_X509V3_EXT_METHOD_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.X509V3_EXT_METHOD, st)

#define sk_X509_ALGOR_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509_ALGOR, cmp)
#define sk_X509_ALGOR_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509_ALGOR)
#define sk_X509_ALGOR_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509_ALGOR, st, i)
#define sk_X509_ALGOR_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509_ALGOR, st, i, val)
#define sk_X509_ALGOR_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509_ALGOR, st, val)
#define sk_X509_ALGOR_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509_ALGOR, st, val)
#define sk_X509_ALGOR_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509_ALGOR, st, val)
#define sk_X509_ALGOR_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509_ALGOR, st, val)
#define sk_X509_ALGOR_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509_ALGOR, st, i)
#define sk_X509_ALGOR_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509_ALGOR, st, ptr_)
#define sk_X509_ALGOR_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509_ALGOR, st, val, i)
#define sk_X509_ALGOR_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509_ALGOR, st, cmp)
#define sk_X509_ALGOR_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509_ALGOR, st, free_func)
#define sk_X509_ALGOR_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509_ALGOR, st)
#define sk_X509_ALGOR_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509_ALGOR, st)

#define sk_X509_ATTRIBUTE_new(cmp) SKM_sk_new(libressl_d.openssl.x509.X509_ATTRIBUTE, cmp)
#define sk_X509_ATTRIBUTE_new_null() SKM_sk_new_null(libressl_d.openssl.x509.X509_ATTRIBUTE)
#define sk_X509_ATTRIBUTE_free(st) SKM_sk_free(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_num(st) SKM_sk_num(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_value(st, i) SKM_sk_value(libressl_d.openssl.x509.X509_ATTRIBUTE, st, i)
#define sk_X509_ATTRIBUTE_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509.X509_ATTRIBUTE, st, i, val)
#define sk_X509_ATTRIBUTE_zero(st) SKM_sk_zero(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_push(st, val) SKM_sk_push(libressl_d.openssl.x509.X509_ATTRIBUTE, st, val)
#define sk_X509_ATTRIBUTE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509.X509_ATTRIBUTE, st, val)
#define sk_X509_ATTRIBUTE_find(st, val) SKM_sk_find(libressl_d.openssl.x509.X509_ATTRIBUTE, st, val)
#define sk_X509_ATTRIBUTE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509.X509_ATTRIBUTE, st, val)
#define sk_X509_ATTRIBUTE_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509.X509_ATTRIBUTE, st, i)
#define sk_X509_ATTRIBUTE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509.X509_ATTRIBUTE, st, ptr_)
#define sk_X509_ATTRIBUTE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509.X509_ATTRIBUTE, st, val, i)
#define sk_X509_ATTRIBUTE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509.X509_ATTRIBUTE, st, cmp)
#define sk_X509_ATTRIBUTE_dup(st) SKM_sk_dup(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509.X509_ATTRIBUTE, st, free_func)
#define sk_X509_ATTRIBUTE_shift(st) SKM_sk_shift(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_pop(st) SKM_sk_pop(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_sort(st) SKM_sk_sort(libressl_d.openssl.x509.X509_ATTRIBUTE, st)
#define sk_X509_ATTRIBUTE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509.X509_ATTRIBUTE, st)

#define sk_X509_CRL_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509_CRL, cmp)
#define sk_X509_CRL_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509_CRL)
#define sk_X509_CRL_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509_CRL, st, i)
#define sk_X509_CRL_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509_CRL, st, i, val)
#define sk_X509_CRL_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509_CRL, st, val)
#define sk_X509_CRL_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509_CRL, st, val)
#define sk_X509_CRL_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509_CRL, st, val)
#define sk_X509_CRL_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509_CRL, st, val)
#define sk_X509_CRL_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509_CRL, st, i)
#define sk_X509_CRL_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509_CRL, st, ptr_)
#define sk_X509_CRL_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509_CRL, st, val, i)
#define sk_X509_CRL_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509_CRL, st, cmp)
#define sk_X509_CRL_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509_CRL, st, free_func)
#define sk_X509_CRL_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509_CRL, st)
#define sk_X509_CRL_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509_CRL, st)

#define sk_X509_EXTENSION_new(cmp) SKM_sk_new(libressl_d.openssl.x509.X509_EXTENSION, cmp)
#define sk_X509_EXTENSION_new_null() SKM_sk_new_null(libressl_d.openssl.x509.X509_EXTENSION)
#define sk_X509_EXTENSION_free(st) SKM_sk_free(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_num(st) SKM_sk_num(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_value(st, i) SKM_sk_value(libressl_d.openssl.x509.X509_EXTENSION, st, i)
#define sk_X509_EXTENSION_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509.X509_EXTENSION, st, i, val)
#define sk_X509_EXTENSION_zero(st) SKM_sk_zero(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_push(st, val) SKM_sk_push(libressl_d.openssl.x509.X509_EXTENSION, st, val)
#define sk_X509_EXTENSION_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509.X509_EXTENSION, st, val)
#define sk_X509_EXTENSION_find(st, val) SKM_sk_find(libressl_d.openssl.x509.X509_EXTENSION, st, val)
#define sk_X509_EXTENSION_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509.X509_EXTENSION, st, val)
#define sk_X509_EXTENSION_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509.X509_EXTENSION, st, i)
#define sk_X509_EXTENSION_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509.X509_EXTENSION, st, ptr_)
#define sk_X509_EXTENSION_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509.X509_EXTENSION, st, val, i)
#define sk_X509_EXTENSION_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509.X509_EXTENSION, st, cmp)
#define sk_X509_EXTENSION_dup(st) SKM_sk_dup(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509.X509_EXTENSION, st, free_func)
#define sk_X509_EXTENSION_shift(st) SKM_sk_shift(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_pop(st) SKM_sk_pop(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_sort(st) SKM_sk_sort(libressl_d.openssl.x509.X509_EXTENSION, st)
#define sk_X509_EXTENSION_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509.X509_EXTENSION, st)

#define sk_X509_INFO_new(cmp) SKM_sk_new(libressl_d.openssl.x509.X509_INFO, cmp)
#define sk_X509_INFO_new_null() SKM_sk_new_null(libressl_d.openssl.x509.X509_INFO)
#define sk_X509_INFO_free(st) SKM_sk_free(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_num(st) SKM_sk_num(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_value(st, i) SKM_sk_value(libressl_d.openssl.x509.X509_INFO, st, i)
#define sk_X509_INFO_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509.X509_INFO, st, i, val)
#define sk_X509_INFO_zero(st) SKM_sk_zero(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_push(st, val) SKM_sk_push(libressl_d.openssl.x509.X509_INFO, st, val)
#define sk_X509_INFO_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509.X509_INFO, st, val)
#define sk_X509_INFO_find(st, val) SKM_sk_find(libressl_d.openssl.x509.X509_INFO, st, val)
#define sk_X509_INFO_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509.X509_INFO, st, val)
#define sk_X509_INFO_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509.X509_INFO, st, i)
#define sk_X509_INFO_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509.X509_INFO, st, ptr_)
#define sk_X509_INFO_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509.X509_INFO, st, val, i)
#define sk_X509_INFO_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509.X509_INFO, st, cmp)
#define sk_X509_INFO_dup(st) SKM_sk_dup(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509.X509_INFO, st, free_func)
#define sk_X509_INFO_shift(st) SKM_sk_shift(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_pop(st) SKM_sk_pop(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_sort(st) SKM_sk_sort(libressl_d.openssl.x509.X509_INFO, st)
#define sk_X509_INFO_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509.X509_INFO, st)

#define sk_X509_LOOKUP_new(cmp) SKM_sk_new(libressl_d.openssl.x509_vfy.X509_LOOKUP, cmp)
#define sk_X509_LOOKUP_new_null() SKM_sk_new_null(libressl_d.openssl.x509_vfy.X509_LOOKUP)
#define sk_X509_LOOKUP_free(st) SKM_sk_free(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_num(st) SKM_sk_num(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_value(st, i) SKM_sk_value(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, i)
#define sk_X509_LOOKUP_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, i, val)
#define sk_X509_LOOKUP_zero(st) SKM_sk_zero(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_push(st, val) SKM_sk_push(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, val)
#define sk_X509_LOOKUP_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, val)
#define sk_X509_LOOKUP_find(st, val) SKM_sk_find(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, val)
#define sk_X509_LOOKUP_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, val)
#define sk_X509_LOOKUP_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, i)
#define sk_X509_LOOKUP_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, ptr_)
#define sk_X509_LOOKUP_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, val, i)
#define sk_X509_LOOKUP_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, cmp)
#define sk_X509_LOOKUP_dup(st) SKM_sk_dup(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509_vfy.X509_LOOKUP, st, free_func)
#define sk_X509_LOOKUP_shift(st) SKM_sk_shift(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_pop(st) SKM_sk_pop(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_sort(st) SKM_sk_sort(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)
#define sk_X509_LOOKUP_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509_vfy.X509_LOOKUP, st)

#define sk_X509_NAME_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509_NAME, cmp)
#define sk_X509_NAME_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509_NAME)
#define sk_X509_NAME_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509_NAME, st, i)
#define sk_X509_NAME_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509_NAME, st, i, val)
#define sk_X509_NAME_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509_NAME, st, val)
#define sk_X509_NAME_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509_NAME, st, val)
#define sk_X509_NAME_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509_NAME, st, val)
#define sk_X509_NAME_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509_NAME, st, val)
#define sk_X509_NAME_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509_NAME, st, i)
#define sk_X509_NAME_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509_NAME, st, ptr_)
#define sk_X509_NAME_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509_NAME, st, val, i)
#define sk_X509_NAME_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509_NAME, st, cmp)
#define sk_X509_NAME_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509_NAME, st, free_func)
#define sk_X509_NAME_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509_NAME, st)
#define sk_X509_NAME_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509_NAME, st)

#define sk_X509_NAME_ENTRY_new(cmp) SKM_sk_new(libressl_d.openssl.x509.X509_NAME_ENTRY, cmp)
#define sk_X509_NAME_ENTRY_new_null() SKM_sk_new_null(libressl_d.openssl.x509.X509_NAME_ENTRY)
#define sk_X509_NAME_ENTRY_free(st) SKM_sk_free(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_num(st) SKM_sk_num(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_value(st, i) SKM_sk_value(libressl_d.openssl.x509.X509_NAME_ENTRY, st, i)
#define sk_X509_NAME_ENTRY_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509.X509_NAME_ENTRY, st, i, val)
#define sk_X509_NAME_ENTRY_zero(st) SKM_sk_zero(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_push(st, val) SKM_sk_push(libressl_d.openssl.x509.X509_NAME_ENTRY, st, val)
#define sk_X509_NAME_ENTRY_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509.X509_NAME_ENTRY, st, val)
#define sk_X509_NAME_ENTRY_find(st, val) SKM_sk_find(libressl_d.openssl.x509.X509_NAME_ENTRY, st, val)
#define sk_X509_NAME_ENTRY_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509.X509_NAME_ENTRY, st, val)
#define sk_X509_NAME_ENTRY_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509.X509_NAME_ENTRY, st, i)
#define sk_X509_NAME_ENTRY_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509.X509_NAME_ENTRY, st, ptr_)
#define sk_X509_NAME_ENTRY_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509.X509_NAME_ENTRY, st, val, i)
#define sk_X509_NAME_ENTRY_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509.X509_NAME_ENTRY, st, cmp)
#define sk_X509_NAME_ENTRY_dup(st) SKM_sk_dup(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509.X509_NAME_ENTRY, st, free_func)
#define sk_X509_NAME_ENTRY_shift(st) SKM_sk_shift(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_pop(st) SKM_sk_pop(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_sort(st) SKM_sk_sort(libressl_d.openssl.x509.X509_NAME_ENTRY, st)
#define sk_X509_NAME_ENTRY_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509.X509_NAME_ENTRY, st)

#define sk_X509_OBJECT_new(cmp) SKM_sk_new(libressl_d.openssl.x509_vfy.X509_OBJECT, cmp)
#define sk_X509_OBJECT_new_null() SKM_sk_new_null(libressl_d.openssl.x509_vfy.X509_OBJECT)
#define sk_X509_OBJECT_free(st) SKM_sk_free(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_num(st) SKM_sk_num(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_value(st, i) SKM_sk_value(libressl_d.openssl.x509_vfy.X509_OBJECT, st, i)
#define sk_X509_OBJECT_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509_vfy.X509_OBJECT, st, i, val)
#define sk_X509_OBJECT_zero(st) SKM_sk_zero(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_push(st, val) SKM_sk_push(libressl_d.openssl.x509_vfy.X509_OBJECT, st, val)
#define sk_X509_OBJECT_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509_vfy.X509_OBJECT, st, val)
#define sk_X509_OBJECT_find(st, val) SKM_sk_find(libressl_d.openssl.x509_vfy.X509_OBJECT, st, val)
#define sk_X509_OBJECT_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509_vfy.X509_OBJECT, st, val)
#define sk_X509_OBJECT_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509_vfy.X509_OBJECT, st, i)
#define sk_X509_OBJECT_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509_vfy.X509_OBJECT, st, ptr_)
#define sk_X509_OBJECT_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509_vfy.X509_OBJECT, st, val, i)
#define sk_X509_OBJECT_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509_vfy.X509_OBJECT, st, cmp)
#define sk_X509_OBJECT_dup(st) SKM_sk_dup(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509_vfy.X509_OBJECT, st, free_func)
#define sk_X509_OBJECT_shift(st) SKM_sk_shift(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_pop(st) SKM_sk_pop(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_sort(st) SKM_sk_sort(libressl_d.openssl.x509_vfy.X509_OBJECT, st)
#define sk_X509_OBJECT_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509_vfy.X509_OBJECT, st)

#define sk_X509_POLICY_DATA_new(cmp) SKM_sk_new(X509_POLICY_DATA, cmp)
#define sk_X509_POLICY_DATA_new_null() SKM_sk_new_null(X509_POLICY_DATA)
#define sk_X509_POLICY_DATA_free(st) SKM_sk_free(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_num(st) SKM_sk_num(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_value(st, i) SKM_sk_value(X509_POLICY_DATA, st, i)
#define sk_X509_POLICY_DATA_set(st, i, val) SKM_sk_set(X509_POLICY_DATA, st, i, val)
#define sk_X509_POLICY_DATA_zero(st) SKM_sk_zero(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_push(st, val) SKM_sk_push(X509_POLICY_DATA, st, val)
#define sk_X509_POLICY_DATA_unshift(st, val) SKM_sk_unshift(X509_POLICY_DATA, st, val)
#define sk_X509_POLICY_DATA_find(st, val) SKM_sk_find(X509_POLICY_DATA, st, val)
#define sk_X509_POLICY_DATA_find_ex(st, val) SKM_sk_find_ex(X509_POLICY_DATA, st, val)
#define sk_X509_POLICY_DATA_delete(st, i) SKM_sk_delete(X509_POLICY_DATA, st, i)
#define sk_X509_POLICY_DATA_delete_ptr(st, ptr_) SKM_sk_delete_ptr(X509_POLICY_DATA, st, ptr_)
#define sk_X509_POLICY_DATA_insert(st, val, i) SKM_sk_insert(X509_POLICY_DATA, st, val, i)
#define sk_X509_POLICY_DATA_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(X509_POLICY_DATA, st, cmp)
#define sk_X509_POLICY_DATA_dup(st) SKM_sk_dup(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_pop_free(st, free_func) SKM_sk_pop_free(X509_POLICY_DATA, st, free_func)
#define sk_X509_POLICY_DATA_shift(st) SKM_sk_shift(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_pop(st) SKM_sk_pop(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_sort(st) SKM_sk_sort(X509_POLICY_DATA, st)
#define sk_X509_POLICY_DATA_is_sorted(st) SKM_sk_is_sorted(X509_POLICY_DATA, st)

#define sk_X509_POLICY_NODE_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, cmp)
#define sk_X509_POLICY_NODE_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509_POLICY_NODE)
#define sk_X509_POLICY_NODE_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, i)
#define sk_X509_POLICY_NODE_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, i, val)
#define sk_X509_POLICY_NODE_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, val)
#define sk_X509_POLICY_NODE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, val)
#define sk_X509_POLICY_NODE_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, val)
#define sk_X509_POLICY_NODE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, val)
#define sk_X509_POLICY_NODE_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, i)
#define sk_X509_POLICY_NODE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, ptr_)
#define sk_X509_POLICY_NODE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, val, i)
#define sk_X509_POLICY_NODE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, cmp)
#define sk_X509_POLICY_NODE_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st, free_func)
#define sk_X509_POLICY_NODE_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)
#define sk_X509_POLICY_NODE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509_POLICY_NODE, st)

#define sk_X509_PURPOSE_new(cmp) SKM_sk_new(libressl_d.openssl.x509v3.X509_PURPOSE, cmp)
#define sk_X509_PURPOSE_new_null() SKM_sk_new_null(libressl_d.openssl.x509v3.X509_PURPOSE)
#define sk_X509_PURPOSE_free(st) SKM_sk_free(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_num(st) SKM_sk_num(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_value(st, i) SKM_sk_value(libressl_d.openssl.x509v3.X509_PURPOSE, st, i)
#define sk_X509_PURPOSE_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509v3.X509_PURPOSE, st, i, val)
#define sk_X509_PURPOSE_zero(st) SKM_sk_zero(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_push(st, val) SKM_sk_push(libressl_d.openssl.x509v3.X509_PURPOSE, st, val)
#define sk_X509_PURPOSE_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509v3.X509_PURPOSE, st, val)
#define sk_X509_PURPOSE_find(st, val) SKM_sk_find(libressl_d.openssl.x509v3.X509_PURPOSE, st, val)
#define sk_X509_PURPOSE_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509v3.X509_PURPOSE, st, val)
#define sk_X509_PURPOSE_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509v3.X509_PURPOSE, st, i)
#define sk_X509_PURPOSE_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509v3.X509_PURPOSE, st, ptr_)
#define sk_X509_PURPOSE_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509v3.X509_PURPOSE, st, val, i)
#define sk_X509_PURPOSE_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509v3.X509_PURPOSE, st, cmp)
#define sk_X509_PURPOSE_dup(st) SKM_sk_dup(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509v3.X509_PURPOSE, st, free_func)
#define sk_X509_PURPOSE_shift(st) SKM_sk_shift(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_pop(st) SKM_sk_pop(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_sort(st) SKM_sk_sort(libressl_d.openssl.x509v3.X509_PURPOSE, st)
#define sk_X509_PURPOSE_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509v3.X509_PURPOSE, st)

#define sk_X509_REVOKED_new(cmp) SKM_sk_new(libressl_d.openssl.ossl_typ.X509_REVOKED, cmp)
#define sk_X509_REVOKED_new_null() SKM_sk_new_null(libressl_d.openssl.ossl_typ.X509_REVOKED)
#define sk_X509_REVOKED_free(st) SKM_sk_free(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_num(st) SKM_sk_num(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_value(st, i) SKM_sk_value(libressl_d.openssl.ossl_typ.X509_REVOKED, st, i)
#define sk_X509_REVOKED_set(st, i, val) SKM_sk_set(libressl_d.openssl.ossl_typ.X509_REVOKED, st, i, val)
#define sk_X509_REVOKED_zero(st) SKM_sk_zero(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_push(st, val) SKM_sk_push(libressl_d.openssl.ossl_typ.X509_REVOKED, st, val)
#define sk_X509_REVOKED_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.ossl_typ.X509_REVOKED, st, val)
#define sk_X509_REVOKED_find(st, val) SKM_sk_find(libressl_d.openssl.ossl_typ.X509_REVOKED, st, val)
#define sk_X509_REVOKED_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.ossl_typ.X509_REVOKED, st, val)
#define sk_X509_REVOKED_delete(st, i) SKM_sk_delete(libressl_d.openssl.ossl_typ.X509_REVOKED, st, i)
#define sk_X509_REVOKED_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.ossl_typ.X509_REVOKED, st, ptr_)
#define sk_X509_REVOKED_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.ossl_typ.X509_REVOKED, st, val, i)
#define sk_X509_REVOKED_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.ossl_typ.X509_REVOKED, st, cmp)
#define sk_X509_REVOKED_dup(st) SKM_sk_dup(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.ossl_typ.X509_REVOKED, st, free_func)
#define sk_X509_REVOKED_shift(st) SKM_sk_shift(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_pop(st) SKM_sk_pop(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_sort(st) SKM_sk_sort(libressl_d.openssl.ossl_typ.X509_REVOKED, st)
#define sk_X509_REVOKED_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.ossl_typ.X509_REVOKED, st)

#define sk_X509_TRUST_new(cmp) SKM_sk_new(libressl_d.openssl.x509.X509_TRUST, cmp)
#define sk_X509_TRUST_new_null() SKM_sk_new_null(libressl_d.openssl.x509.X509_TRUST)
#define sk_X509_TRUST_free(st) SKM_sk_free(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_num(st) SKM_sk_num(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_value(st, i) SKM_sk_value(libressl_d.openssl.x509.X509_TRUST, st, i)
#define sk_X509_TRUST_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509.X509_TRUST, st, i, val)
#define sk_X509_TRUST_zero(st) SKM_sk_zero(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_push(st, val) SKM_sk_push(libressl_d.openssl.x509.X509_TRUST, st, val)
#define sk_X509_TRUST_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509.X509_TRUST, st, val)
#define sk_X509_TRUST_find(st, val) SKM_sk_find(libressl_d.openssl.x509.X509_TRUST, st, val)
#define sk_X509_TRUST_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509.X509_TRUST, st, val)
#define sk_X509_TRUST_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509.X509_TRUST, st, i)
#define sk_X509_TRUST_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509.X509_TRUST, st, ptr_)
#define sk_X509_TRUST_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509.X509_TRUST, st, val, i)
#define sk_X509_TRUST_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509.X509_TRUST, st, cmp)
#define sk_X509_TRUST_dup(st) SKM_sk_dup(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509.X509_TRUST, st, free_func)
#define sk_X509_TRUST_shift(st) SKM_sk_shift(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_pop(st) SKM_sk_pop(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_sort(st) SKM_sk_sort(libressl_d.openssl.x509.X509_TRUST, st)
#define sk_X509_TRUST_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509.X509_TRUST, st)

#define sk_X509_VERIFY_PARAM_new(cmp) SKM_sk_new(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, cmp)
#define sk_X509_VERIFY_PARAM_new_null() SKM_sk_new_null(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM)
#define sk_X509_VERIFY_PARAM_free(st) SKM_sk_free(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_num(st) SKM_sk_num(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_value(st, i) SKM_sk_value(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, i)
#define sk_X509_VERIFY_PARAM_set(st, i, val) SKM_sk_set(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, i, val)
#define sk_X509_VERIFY_PARAM_zero(st) SKM_sk_zero(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_push(st, val) SKM_sk_push(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, val)
#define sk_X509_VERIFY_PARAM_unshift(st, val) SKM_sk_unshift(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, val)
#define sk_X509_VERIFY_PARAM_find(st, val) SKM_sk_find(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, val)
#define sk_X509_VERIFY_PARAM_find_ex(st, val) SKM_sk_find_ex(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, val)
#define sk_X509_VERIFY_PARAM_delete(st, i) SKM_sk_delete(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, i)
#define sk_X509_VERIFY_PARAM_delete_ptr(st, ptr_) SKM_sk_delete_ptr(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, ptr_)
#define sk_X509_VERIFY_PARAM_insert(st, val, i) SKM_sk_insert(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, val, i)
#define sk_X509_VERIFY_PARAM_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, cmp)
#define sk_X509_VERIFY_PARAM_dup(st) SKM_sk_dup(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_pop_free(st, free_func) SKM_sk_pop_free(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st, free_func)
#define sk_X509_VERIFY_PARAM_shift(st) SKM_sk_shift(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_pop(st) SKM_sk_pop(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_sort(st) SKM_sk_sort(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)
#define sk_X509_VERIFY_PARAM_is_sorted(st) SKM_sk_is_sorted(libressl_d.openssl.x509_vfy.X509_VERIFY_PARAM, st)

#define sk_nid_triple_new(cmp) SKM_sk_new(nid_triple, cmp)
#define sk_nid_triple_new_null() SKM_sk_new_null(nid_triple)
#define sk_nid_triple_free(st) SKM_sk_free(nid_triple, st)
#define sk_nid_triple_num(st) SKM_sk_num(nid_triple, st)
#define sk_nid_triple_value(st, i) SKM_sk_value(nid_triple, st, i)
#define sk_nid_triple_set(st, i, val) SKM_sk_set(nid_triple, st, i, val)
#define sk_nid_triple_zero(st) SKM_sk_zero(nid_triple, st)
#define sk_nid_triple_push(st, val) SKM_sk_push(nid_triple, st, val)
#define sk_nid_triple_unshift(st, val) SKM_sk_unshift(nid_triple, st, val)
#define sk_nid_triple_find(st, val) SKM_sk_find(nid_triple, st, val)
#define sk_nid_triple_find_ex(st, val) SKM_sk_find_ex(nid_triple, st, val)
#define sk_nid_triple_delete(st, i) SKM_sk_delete(nid_triple, st, i)
#define sk_nid_triple_delete_ptr(st, ptr_) SKM_sk_delete_ptr(nid_triple, st, ptr_)
#define sk_nid_triple_insert(st, val, i) SKM_sk_insert(nid_triple, st, val, i)
#define sk_nid_triple_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(nid_triple, st, cmp)
#define sk_nid_triple_dup(st) SKM_sk_dup(nid_triple, st)
#define sk_nid_triple_pop_free(st, free_func) SKM_sk_pop_free(nid_triple, st, free_func)
#define sk_nid_triple_shift(st) SKM_sk_shift(nid_triple, st)
#define sk_nid_triple_pop(st) SKM_sk_pop(nid_triple, st)
#define sk_nid_triple_sort(st) SKM_sk_sort(nid_triple, st)
#define sk_nid_triple_is_sorted(st) SKM_sk_is_sorted(nid_triple, st)

#define sk_void_new(cmp) SKM_sk_new(void, cmp)
#define sk_void_new_null() SKM_sk_new_null(void)
#define sk_void_free(st) SKM_sk_free(void, st)
#define sk_void_num(st) SKM_sk_num(void, st)
#define sk_void_value(st, i) SKM_sk_value(void, st, i)
#define sk_void_set(st, i, val) SKM_sk_set(void, st, i, val)
#define sk_void_zero(st) SKM_sk_zero(void, st)
#define sk_void_push(st, val) SKM_sk_push(void, st, val)
#define sk_void_unshift(st, val) SKM_sk_unshift(void, st, val)
#define sk_void_find(st, val) SKM_sk_find(void, st, val)
#define sk_void_find_ex(st, val) SKM_sk_find_ex(void, st, val)
#define sk_void_delete(st, i) SKM_sk_delete(void, st, i)
#define sk_void_delete_ptr(st, ptr_) SKM_sk_delete_ptr(void, st, ptr_)
#define sk_void_insert(st, val, i) SKM_sk_insert(void, st, val, i)
#define sk_void_set_cmp_func(st, cmp) SKM_sk_set_cmp_func(void, st, cmp)
#define sk_void_dup(st) SKM_sk_dup(void, st)
#define sk_void_pop_free(st, free_func) SKM_sk_pop_free(void, st, free_func)
#define sk_void_shift(st) SKM_sk_shift(void, st)
#define sk_void_pop(st) SKM_sk_pop(void, st)
#define sk_void_sort(st) SKM_sk_sort(void, st)
#define sk_void_is_sorted(st) SKM_sk_is_sorted(void, st)

#define sk_OPENSSL_STRING_new(cmp) ((stack_st_OPENSSL_STRING*) libressl_d.openssl.stack.sk_new(CHECKED_SK_CMP_FUNC(char, cmp)))
#define sk_OPENSSL_STRING_new_null() ((stack_st_OPENSSL_STRING*) libressl_d.openssl.stack.sk_new_null())
#define sk_OPENSSL_STRING_push(st, val) libressl_d.openssl.stack.sk_push(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_PTR_OF(char, val))
#define sk_OPENSSL_STRING_find(st, val) libressl_d.openssl.stack.sk_find(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_PTR_OF(char, val))
#define sk_OPENSSL_STRING_value(st, i) ((OPENSSL_STRING) libressl_d.openssl.stack.sk_value(CHECKED_STACK_OF(OPENSSL_STRING, st), i))
#define sk_OPENSSL_STRING_num(st) SKM_sk_num(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_pop_free(st, free_func) libressl_d.openssl.stack.sk_pop_free(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_SK_FREE_FUNC2(OPENSSL_STRING, free_func))
#define sk_OPENSSL_STRING_insert(st, val, i) libressl_d.openssl.stack.sk_insert(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_PTR_OF(char, val), i)
#define sk_OPENSSL_STRING_free(st) SKM_sk_free(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_set(st, i, val) libressl_d.openssl.stack.sk_set(CHECKED_STACK_OF(OPENSSL_STRING, st), i, CHECKED_PTR_OF(char, val))
#define sk_OPENSSL_STRING_zero(st) SKM_sk_zero(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_unshift(st, val) libressl_d.openssl.stack.sk_unshift(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_PTR_OF(char, val))
#define sk_OPENSSL_STRING_find_ex(st, val) libressl_d.openssl.stack.sk_find_ex((libressl_d.openssl.stack._STACK*) CHECKED_CONST_PTR_OF(stack_st_OPENSSL_STRING, st), CHECKED_CONST_PTR_OF(char, val))
#define sk_OPENSSL_STRING_delete(st, i) SKM_sk_delete(OPENSSL_STRING, st, i)
#define sk_OPENSSL_STRING_delete_ptr(st, ptr_) cast(OPENSSL_STRING*)(libressl_d.openssl.stack.sk_delete_ptr(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_PTR_OF(char, ptr_)))
#define sk_OPENSSL_STRING_set_cmp_func(st, cmp) ((int (*)(const (char)* const*, const (char)* const*)) libressl_d.openssl.stack.sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_STRING, st), CHECKED_SK_CMP_FUNC(char, cmp)))
#define sk_OPENSSL_STRING_dup(st) SKM_sk_dup(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_shift(st) SKM_sk_shift(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_pop(st) cast(char*)(libressl_d.openssl.stack.sk_pop(CHECKED_STACK_OF(OPENSSL_STRING, st)))
#define sk_OPENSSL_STRING_sort(st) SKM_sk_sort(OPENSSL_STRING, st)
#define sk_OPENSSL_STRING_is_sorted(st) SKM_sk_is_sorted(OPENSSL_STRING, st)

#define sk_OPENSSL_BLOCK_new(cmp) ((stack_st_OPENSSL_BLOCK*) libressl_d.openssl.stack.sk_new(CHECKED_SK_CMP_FUNC(void, cmp)))
#define sk_OPENSSL_BLOCK_new_null() ((stack_st_OPENSSL_BLOCK*) libressl_d.openssl.stack.sk_new_null())
#define sk_OPENSSL_BLOCK_push(st, val) libressl_d.openssl.stack.sk_push(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_PTR_OF(void, val))
#define sk_OPENSSL_BLOCK_find(st, val) libressl_d.openssl.stack.sk_find(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_PTR_OF(void, val))
#define sk_OPENSSL_BLOCK_value(st, i) ((OPENSSL_BLOCK) libressl_d.openssl.stack.sk_value(CHECKED_STACK_OF(OPENSSL_BLOCK, st), i))
#define sk_OPENSSL_BLOCK_num(st) SKM_sk_num(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_pop_free(st, free_func) libressl_d.openssl.stack.sk_pop_free(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_SK_FREE_FUNC2(OPENSSL_BLOCK, free_func))
#define sk_OPENSSL_BLOCK_insert(st, val, i) libressl_d.openssl.stack.sk_insert(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_PTR_OF(void, val), i)
#define sk_OPENSSL_BLOCK_free(st) SKM_sk_free(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_set(st, i, val) libressl_d.openssl.stack.sk_set(CHECKED_STACK_OF(OPENSSL_BLOCK, st), i, CHECKED_PTR_OF(void, val))
#define sk_OPENSSL_BLOCK_zero(st) SKM_sk_zero(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_unshift(st, val) libressl_d.openssl.stack.sk_unshift(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_PTR_OF(void, val))
#define sk_OPENSSL_BLOCK_find_ex(st, val) libressl_d.openssl.stack.sk_find_ex((libressl_d.openssl.stack._STACK*) CHECKED_CONST_PTR_OF(stack_st_OPENSSL_BLOCK, st), CHECKED_CONST_PTR_OF(void, val))
#define sk_OPENSSL_BLOCK_delete(st, i) SKM_sk_delete(OPENSSL_BLOCK, st, i)
#define sk_OPENSSL_BLOCK_delete_ptr(st, ptr_) cast(OPENSSL_BLOCK*)(libressl_d.openssl.stack.sk_delete_ptr(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_PTR_OF(void, ptr_)))
#define sk_OPENSSL_BLOCK_set_cmp_func(st, cmp) ((int (*)(const (void)* const*, const (void)* const*)) libressl_d.openssl.stack.sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_BLOCK, st), CHECKED_SK_CMP_FUNC(void, cmp)))
#define sk_OPENSSL_BLOCK_dup(st) SKM_sk_dup(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_shift(st) SKM_sk_shift(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_pop(st) cast(void*)(libressl_d.openssl.stack.sk_pop(CHECKED_STACK_OF(OPENSSL_BLOCK, st)))
#define sk_OPENSSL_BLOCK_sort(st) SKM_sk_sort(OPENSSL_BLOCK, st)
#define sk_OPENSSL_BLOCK_is_sorted(st) SKM_sk_is_sorted(OPENSSL_BLOCK, st)

#define sk_OPENSSL_PSTRING_new(cmp) ((stack_st_OPENSSL_PSTRING*) libressl_d.openssl.stack.sk_new(CHECKED_SK_CMP_FUNC(OPENSSL_STRING, cmp)))
#define sk_OPENSSL_PSTRING_new_null() ((stack_st_OPENSSL_PSTRING*) libressl_d.openssl.stack.sk_new_null())
#define sk_OPENSSL_PSTRING_push(st, val) libressl_d.openssl.stack.sk_push(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_PTR_OF(OPENSSL_STRING, val))
#define sk_OPENSSL_PSTRING_find(st, val) libressl_d.openssl.stack.sk_find(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_PTR_OF(OPENSSL_STRING, val))
#define sk_OPENSSL_PSTRING_value(st, i) ((OPENSSL_PSTRING) libressl_d.openssl.stack.sk_value(CHECKED_STACK_OF(OPENSSL_PSTRING, st), i))
#define sk_OPENSSL_PSTRING_num(st) SKM_sk_num(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_pop_free(st, free_func) libressl_d.openssl.stack.sk_pop_free(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_SK_FREE_FUNC2(OPENSSL_PSTRING, free_func))
#define sk_OPENSSL_PSTRING_insert(st, val, i) libressl_d.openssl.stack.sk_insert(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_PTR_OF(OPENSSL_STRING, val), i)
#define sk_OPENSSL_PSTRING_free(st) SKM_sk_free(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_set(st, i, val) libressl_d.openssl.stack.sk_set(CHECKED_STACK_OF(OPENSSL_PSTRING, st), i, CHECKED_PTR_OF(OPENSSL_STRING, val))
#define sk_OPENSSL_PSTRING_zero(st) SKM_sk_zero(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_unshift(st, val) libressl_d.openssl.stack.sk_unshift(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_PTR_OF(OPENSSL_STRING, val))
#define sk_OPENSSL_PSTRING_find_ex(st, val) libressl_d.openssl.stack.sk_find_ex((libressl_d.openssl.stack._STACK*) CHECKED_CONST_PTR_OF(stack_st_OPENSSL_PSTRING, st), CHECKED_CONST_PTR_OF(OPENSSL_STRING, val))
#define sk_OPENSSL_PSTRING_delete(st, i) SKM_sk_delete(OPENSSL_PSTRING, st, i)
#define sk_OPENSSL_PSTRING_delete_ptr(st, ptr_) cast(OPENSSL_PSTRING*)(libressl_d.openssl.stack.sk_delete_ptr(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_PTR_OF(OPENSSL_STRING, ptr_)))
#define sk_OPENSSL_PSTRING_set_cmp_func(st, cmp) ((int (*)(const (OPENSSL_STRING)* const*, const (OPENSSL_STRING)* const*)) libressl_d.openssl.stack.sk_set_cmp_func(CHECKED_STACK_OF(OPENSSL_PSTRING, st), CHECKED_SK_CMP_FUNC(OPENSSL_STRING, cmp)))
#define sk_OPENSSL_PSTRING_dup(st) SKM_sk_dup(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_shift(st) SKM_sk_shift(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_pop(st) cast(OPENSSL_STRING*)(libressl_d.openssl.stack.sk_pop(CHECKED_STACK_OF(OPENSSL_PSTRING, st)))
#define sk_OPENSSL_PSTRING_sort(st) SKM_sk_sort(OPENSSL_PSTRING, st)
#define sk_OPENSSL_PSTRING_is_sorted(st) SKM_sk_is_sorted(OPENSSL_PSTRING, st)

#define lh_ADDED_OBJ_new() libressl_d.openssl.lhash.LHM_lh_new(ADDED_OBJ, added_obj)
#define lh_ADDED_OBJ_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(ADDED_OBJ, lh, inst)
#define lh_ADDED_OBJ_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(ADDED_OBJ, lh, inst)
#define lh_ADDED_OBJ_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(ADDED_OBJ, lh, inst)
#define lh_ADDED_OBJ_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(ADDED_OBJ, lh, fn)
#define lh_ADDED_OBJ_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(ADDED_OBJ, lh, fn, arg_type, arg)
#define lh_ADDED_OBJ_error(lh) libressl_d.openssl.lhash.LHM_lh_error(ADDED_OBJ, lh)
#define lh_ADDED_OBJ_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(ADDED_OBJ, lh)
#define lh_ADDED_OBJ_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(ADDED_OBJ, lh)
#define lh_ADDED_OBJ_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(ADDED_OBJ, lh, out_)
#define lh_ADDED_OBJ_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(ADDED_OBJ, lh, out_)
#define lh_ADDED_OBJ_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(ADDED_OBJ, lh, out_)
#define lh_ADDED_OBJ_free(lh) libressl_d.openssl.lhash.LHM_lh_free(ADDED_OBJ, lh)

#define lh_APP_INFO_new() libressl_d.openssl.lhash.LHM_lh_new(APP_INFO, app_info)
#define lh_APP_INFO_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(APP_INFO, lh, inst)
#define lh_APP_INFO_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(APP_INFO, lh, inst)
#define lh_APP_INFO_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(APP_INFO, lh, inst)
#define lh_APP_INFO_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(APP_INFO, lh, fn)
#define lh_APP_INFO_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(APP_INFO, lh, fn, arg_type, arg)
#define lh_APP_INFO_error(lh) libressl_d.openssl.lhash.LHM_lh_error(APP_INFO, lh)
#define lh_APP_INFO_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(APP_INFO, lh)
#define lh_APP_INFO_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(APP_INFO, lh)
#define lh_APP_INFO_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(APP_INFO, lh, out_)
#define lh_APP_INFO_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(APP_INFO, lh, out_)
#define lh_APP_INFO_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(APP_INFO, lh, out_)
#define lh_APP_INFO_free(lh) libressl_d.openssl.lhash.LHM_lh_free(APP_INFO, lh)

#define lh_CONF_VALUE_new() libressl_d.openssl.lhash.LHM_lh_new(libressl_d.openssl.conf.CONF_VALUE, conf_value)
#define lh_CONF_VALUE_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(libressl_d.openssl.conf.CONF_VALUE, lh, inst)
#define lh_CONF_VALUE_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(libressl_d.openssl.conf.CONF_VALUE, lh, inst)
#define lh_CONF_VALUE_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(libressl_d.openssl.conf.CONF_VALUE, lh, inst)
#define lh_CONF_VALUE_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(libressl_d.openssl.conf.CONF_VALUE, lh, fn)
#define lh_CONF_VALUE_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(libressl_d.openssl.conf.CONF_VALUE, lh, fn, arg_type, arg)
#define lh_CONF_VALUE_error(lh) libressl_d.openssl.lhash.LHM_lh_error(libressl_d.openssl.conf.CONF_VALUE, lh)
#define lh_CONF_VALUE_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(libressl_d.openssl.conf.CONF_VALUE, lh)
#define lh_CONF_VALUE_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(libressl_d.openssl.conf.CONF_VALUE, lh)
#define lh_CONF_VALUE_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(libressl_d.openssl.conf.CONF_VALUE, lh, out_)
#define lh_CONF_VALUE_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(libressl_d.openssl.conf.CONF_VALUE, lh, out_)
#define lh_CONF_VALUE_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(libressl_d.openssl.conf.CONF_VALUE, lh, out_)
#define lh_CONF_VALUE_free(lh) libressl_d.openssl.lhash.LHM_lh_free(libressl_d.openssl.conf.CONF_VALUE, lh)

#define lh_ENGINE_PILE_new() libressl_d.openssl.lhash.LHM_lh_new(ENGINE_PILE, engine_pile)
#define lh_ENGINE_PILE_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(ENGINE_PILE, lh, inst)
#define lh_ENGINE_PILE_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(ENGINE_PILE, lh, inst)
#define lh_ENGINE_PILE_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(ENGINE_PILE, lh, inst)
#define lh_ENGINE_PILE_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(ENGINE_PILE, lh, fn)
#define lh_ENGINE_PILE_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(ENGINE_PILE, lh, fn, arg_type, arg)
#define lh_ENGINE_PILE_error(lh) libressl_d.openssl.lhash.LHM_lh_error(ENGINE_PILE, lh)
#define lh_ENGINE_PILE_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(ENGINE_PILE, lh)
#define lh_ENGINE_PILE_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(ENGINE_PILE, lh)
#define lh_ENGINE_PILE_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(ENGINE_PILE, lh, out_)
#define lh_ENGINE_PILE_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(ENGINE_PILE, lh, out_)
#define lh_ENGINE_PILE_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(ENGINE_PILE, lh, out_)
#define lh_ENGINE_PILE_free(lh) libressl_d.openssl.lhash.LHM_lh_free(ENGINE_PILE, lh)

#define lh_ERR_STATE_new() libressl_d.openssl.lhash.LHM_lh_new(libressl_d.openssl.err.ERR_STATE, err_state)
#define lh_ERR_STATE_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(libressl_d.openssl.err.ERR_STATE, lh, inst)
#define lh_ERR_STATE_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(libressl_d.openssl.err.ERR_STATE, lh, inst)
#define lh_ERR_STATE_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(libressl_d.openssl.err.ERR_STATE, lh, inst)
#define lh_ERR_STATE_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(libressl_d.openssl.err.ERR_STATE, lh, fn)
#define lh_ERR_STATE_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(libressl_d.openssl.err.ERR_STATE, lh, fn, arg_type, arg)
#define lh_ERR_STATE_error(lh) libressl_d.openssl.lhash.LHM_lh_error(libressl_d.openssl.err.ERR_STATE, lh)
#define lh_ERR_STATE_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(libressl_d.openssl.err.ERR_STATE, lh)
#define lh_ERR_STATE_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(libressl_d.openssl.err.ERR_STATE, lh)
#define lh_ERR_STATE_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(libressl_d.openssl.err.ERR_STATE, lh, out_)
#define lh_ERR_STATE_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(libressl_d.openssl.err.ERR_STATE, lh, out_)
#define lh_ERR_STATE_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(libressl_d.openssl.err.ERR_STATE, lh, out_)
#define lh_ERR_STATE_free(lh) libressl_d.openssl.lhash.LHM_lh_free(libressl_d.openssl.err.ERR_STATE, lh)

#define lh_ERR_STRING_DATA_new() libressl_d.openssl.lhash.LHM_lh_new(libressl_d.openssl.err.ERR_STRING_DATA, err_string_data)
#define lh_ERR_STRING_DATA_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(libressl_d.openssl.err.ERR_STRING_DATA, lh, inst)
#define lh_ERR_STRING_DATA_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(libressl_d.openssl.err.ERR_STRING_DATA, lh, inst)
#define lh_ERR_STRING_DATA_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(libressl_d.openssl.err.ERR_STRING_DATA, lh, inst)
#define lh_ERR_STRING_DATA_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(libressl_d.openssl.err.ERR_STRING_DATA, lh, fn)
#define lh_ERR_STRING_DATA_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(libressl_d.openssl.err.ERR_STRING_DATA, lh, fn, arg_type, arg)
#define lh_ERR_STRING_DATA_error(lh) libressl_d.openssl.lhash.LHM_lh_error(libressl_d.openssl.err.ERR_STRING_DATA, lh)
#define lh_ERR_STRING_DATA_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(libressl_d.openssl.err.ERR_STRING_DATA, lh)
#define lh_ERR_STRING_DATA_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(libressl_d.openssl.err.ERR_STRING_DATA, lh)
#define lh_ERR_STRING_DATA_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(libressl_d.openssl.err.ERR_STRING_DATA, lh, out_)
#define lh_ERR_STRING_DATA_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(libressl_d.openssl.err.ERR_STRING_DATA, lh, out_)
#define lh_ERR_STRING_DATA_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(libressl_d.openssl.err.ERR_STRING_DATA, lh, out_)
#define lh_ERR_STRING_DATA_free(lh) libressl_d.openssl.lhash.LHM_lh_free(libressl_d.openssl.err.ERR_STRING_DATA, lh)

#define lh_EX_CLASS_ITEM_new() libressl_d.openssl.lhash.LHM_lh_new(EX_CLASS_ITEM, ex_class_item)
#define lh_EX_CLASS_ITEM_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(EX_CLASS_ITEM, lh, inst)
#define lh_EX_CLASS_ITEM_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(EX_CLASS_ITEM, lh, inst)
#define lh_EX_CLASS_ITEM_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(EX_CLASS_ITEM, lh, inst)
#define lh_EX_CLASS_ITEM_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(EX_CLASS_ITEM, lh, fn)
#define lh_EX_CLASS_ITEM_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(EX_CLASS_ITEM, lh, fn, arg_type, arg)
#define lh_EX_CLASS_ITEM_error(lh) libressl_d.openssl.lhash.LHM_lh_error(EX_CLASS_ITEM, lh)
#define lh_EX_CLASS_ITEM_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(EX_CLASS_ITEM, lh)
#define lh_EX_CLASS_ITEM_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(EX_CLASS_ITEM, lh)
#define lh_EX_CLASS_ITEM_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(EX_CLASS_ITEM, lh, out_)
#define lh_EX_CLASS_ITEM_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(EX_CLASS_ITEM, lh, out_)
#define lh_EX_CLASS_ITEM_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(EX_CLASS_ITEM, lh, out_)
#define lh_EX_CLASS_ITEM_free(lh) libressl_d.openssl.lhash.LHM_lh_free(EX_CLASS_ITEM, lh)

#define lh_FUNCTION_new() libressl_d.openssl.lhash.LHM_lh_new(FUNCTION, function)
#define lh_FUNCTION_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(FUNCTION, lh, inst)
#define lh_FUNCTION_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(FUNCTION, lh, inst)
#define lh_FUNCTION_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(FUNCTION, lh, inst)
#define lh_FUNCTION_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(FUNCTION, lh, fn)
#define lh_FUNCTION_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(FUNCTION, lh, fn, arg_type, arg)
#define lh_FUNCTION_error(lh) libressl_d.openssl.lhash.LHM_lh_error(FUNCTION, lh)
#define lh_FUNCTION_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(FUNCTION, lh)
#define lh_FUNCTION_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(FUNCTION, lh)
#define lh_FUNCTION_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(FUNCTION, lh, out_)
#define lh_FUNCTION_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(FUNCTION, lh, out_)
#define lh_FUNCTION_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(FUNCTION, lh, out_)
#define lh_FUNCTION_free(lh) libressl_d.openssl.lhash.LHM_lh_free(FUNCTION, lh)

#define lh_MEM_new() libressl_d.openssl.lhash.LHM_lh_new(MEM, mem)
#define lh_MEM_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(MEM, lh, inst)
#define lh_MEM_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(MEM, lh, inst)
#define lh_MEM_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(MEM, lh, inst)
#define lh_MEM_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(MEM, lh, fn)
#define lh_MEM_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(MEM, lh, fn, arg_type, arg)
#define lh_MEM_error(lh) libressl_d.openssl.lhash.LHM_lh_error(MEM, lh)
#define lh_MEM_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(MEM, lh)
#define lh_MEM_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(MEM, lh)
#define lh_MEM_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(MEM, lh, out_)
#define lh_MEM_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(MEM, lh, out_)
#define lh_MEM_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(MEM, lh, out_)
#define lh_MEM_free(lh) libressl_d.openssl.lhash.LHM_lh_free(MEM, lh)

#define lh_OBJ_NAME_new() libressl_d.openssl.lhash.LHM_lh_new(libressl_d.openssl.objects.OBJ_NAME, obj_name)
#define lh_OBJ_NAME_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(libressl_d.openssl.objects.OBJ_NAME, lh, inst)
#define lh_OBJ_NAME_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(libressl_d.openssl.objects.OBJ_NAME, lh, inst)
#define lh_OBJ_NAME_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(libressl_d.openssl.objects.OBJ_NAME, lh, inst)
#define lh_OBJ_NAME_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(libressl_d.openssl.objects.OBJ_NAME, lh, fn)
#define lh_OBJ_NAME_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(libressl_d.openssl.objects.OBJ_NAME, lh, fn, arg_type, arg)
#define lh_OBJ_NAME_error(lh) libressl_d.openssl.lhash.LHM_lh_error(libressl_d.openssl.objects.OBJ_NAME, lh)
#define lh_OBJ_NAME_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(libressl_d.openssl.objects.OBJ_NAME, lh)
#define lh_OBJ_NAME_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(libressl_d.openssl.objects.OBJ_NAME, lh)
#define lh_OBJ_NAME_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(libressl_d.openssl.objects.OBJ_NAME, lh, out_)
#define lh_OBJ_NAME_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(libressl_d.openssl.objects.OBJ_NAME, lh, out_)
#define lh_OBJ_NAME_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(libressl_d.openssl.objects.OBJ_NAME, lh, out_)
#define lh_OBJ_NAME_free(lh) libressl_d.openssl.lhash.LHM_lh_free(libressl_d.openssl.objects.OBJ_NAME, lh)

#define lh_OPENSSL_CSTRING_new() libressl_d.openssl.lhash.LHM_lh_new(OPENSSL_CSTRING, openssl_cstring)
#define lh_OPENSSL_CSTRING_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(OPENSSL_CSTRING, lh, inst)
#define lh_OPENSSL_CSTRING_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(OPENSSL_CSTRING, lh, inst)
#define lh_OPENSSL_CSTRING_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(OPENSSL_CSTRING, lh, inst)
#define lh_OPENSSL_CSTRING_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(OPENSSL_CSTRING, lh, fn)
#define lh_OPENSSL_CSTRING_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(OPENSSL_CSTRING, lh, fn, arg_type, arg)
#define lh_OPENSSL_CSTRING_error(lh) libressl_d.openssl.lhash.LHM_lh_error(OPENSSL_CSTRING, lh)
#define lh_OPENSSL_CSTRING_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(OPENSSL_CSTRING, lh)
#define lh_OPENSSL_CSTRING_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(OPENSSL_CSTRING, lh)
#define lh_OPENSSL_CSTRING_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(OPENSSL_CSTRING, lh, out_)
#define lh_OPENSSL_CSTRING_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(OPENSSL_CSTRING, lh, out_)
#define lh_OPENSSL_CSTRING_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(OPENSSL_CSTRING, lh, out_)
#define lh_OPENSSL_CSTRING_free(lh) libressl_d.openssl.lhash.LHM_lh_free(OPENSSL_CSTRING, lh)

#define lh_OPENSSL_STRING_new() libressl_d.openssl.lhash.LHM_lh_new(OPENSSL_STRING, openssl_string)
#define lh_OPENSSL_STRING_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(OPENSSL_STRING, lh, inst)
#define lh_OPENSSL_STRING_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(OPENSSL_STRING, lh, inst)
#define lh_OPENSSL_STRING_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(OPENSSL_STRING, lh, inst)
#define lh_OPENSSL_STRING_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(OPENSSL_STRING, lh, fn)
#define lh_OPENSSL_STRING_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(OPENSSL_STRING, lh, fn, arg_type, arg)
#define lh_OPENSSL_STRING_error(lh) libressl_d.openssl.lhash.LHM_lh_error(OPENSSL_STRING, lh)
#define lh_OPENSSL_STRING_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(OPENSSL_STRING, lh)
#define lh_OPENSSL_STRING_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(OPENSSL_STRING, lh)
#define lh_OPENSSL_STRING_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(OPENSSL_STRING, lh, out_)
#define lh_OPENSSL_STRING_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(OPENSSL_STRING, lh, out_)
#define lh_OPENSSL_STRING_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(OPENSSL_STRING, lh, out_)
#define lh_OPENSSL_STRING_free(lh) libressl_d.openssl.lhash.LHM_lh_free(OPENSSL_STRING, lh)

#define lh_SSL_SESSION_new() libressl_d.openssl.lhash.LHM_lh_new(libressl_d.openssl.ssl.SSL_SESSION, ssl_session)
#define lh_SSL_SESSION_insert(lh, inst) libressl_d.openssl.lhash.LHM_lh_insert(libressl_d.openssl.ssl.SSL_SESSION, lh, inst)
#define lh_SSL_SESSION_retrieve(lh, inst) libressl_d.openssl.lhash.LHM_lh_retrieve(libressl_d.openssl.ssl.SSL_SESSION, lh, inst)
#define lh_SSL_SESSION_delete(lh, inst) libressl_d.openssl.lhash.LHM_lh_delete(libressl_d.openssl.ssl.SSL_SESSION, lh, inst)
#define lh_SSL_SESSION_doall(lh, fn) libressl_d.openssl.lhash.LHM_lh_doall(libressl_d.openssl.ssl.SSL_SESSION, lh, fn)
#define lh_SSL_SESSION_doall_arg(lh, fn, arg_type, arg) libressl_d.openssl.lhash.LHM_lh_doall_arg(libressl_d.openssl.ssl.SSL_SESSION, lh, fn, arg_type, arg)
#define lh_SSL_SESSION_error(lh) libressl_d.openssl.lhash.LHM_lh_error(libressl_d.openssl.ssl.SSL_SESSION, lh)
#define lh_SSL_SESSION_num_items(lh) libressl_d.openssl.lhash.LHM_lh_num_items(libressl_d.openssl.ssl.SSL_SESSION, lh)
#define lh_SSL_SESSION_down_load(lh) libressl_d.openssl.lhash.LHM_lh_down_load(libressl_d.openssl.ssl.SSL_SESSION, lh)
#define lh_SSL_SESSION_node_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_stats_bio(libressl_d.openssl.ssl.SSL_SESSION, lh, out_)
#define lh_SSL_SESSION_node_usage_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_node_usage_stats_bio(libressl_d.openssl.ssl.SSL_SESSION, lh, out_)
#define lh_SSL_SESSION_stats_bio(lh, out_) libressl_d.openssl.lhash.LHM_lh_stats_bio(libressl_d.openssl.ssl.SSL_SESSION, lh, out_)
#define lh_SSL_SESSION_free(lh) libressl_d.openssl.lhash.LHM_lh_free(libressl_d.openssl.ssl.SSL_SESSION, lh)
+/
